// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SecurityListRequestTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen (version: 4.1.0).
 */

#include "SecurityListRequestTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "SecurityListRequest.hpp"

#include "Header.hpp"

using namespace eprosima::fastdds::dds::xtypes;

namespace DistributedATS_SecurityListRequest {
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_SecurityListRequest_type_identifier(
        TypeIdentifierPair& type_ids_SecurityListRequest)
{

    ReturnCode_t return_code_SecurityListRequest {eprosima::fastdds::dds::RETCODE_OK};
    return_code_SecurityListRequest =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "DistributedATS_SecurityListRequest::SecurityListRequest", type_ids_SecurityListRequest);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_SecurityListRequest)
    {
        StructTypeFlag struct_flags_SecurityListRequest = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_SecurityListRequest = "DistributedATS_SecurityListRequest::SecurityListRequest";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SecurityListRequest;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SecurityListRequest;
        CompleteTypeDetail detail_SecurityListRequest = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SecurityListRequest, ann_custom_SecurityListRequest, type_name_SecurityListRequest.to_string());
        CompleteStructHeader header_SecurityListRequest;
        header_SecurityListRequest = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SecurityListRequest);
        CompleteStructMemberSeq member_seq_SecurityListRequest;
        {
            TypeIdentifierPair type_ids_fix_header;
            ReturnCode_t return_code_fix_header {eprosima::fastdds::dds::RETCODE_OK};
            return_code_fix_header =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "DistributedATS::Header", type_ids_fix_header);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_fix_header)
            {
                DistributedATS::register_Header_type_identifier(type_ids_fix_header);
            }
            StructMemberFlag member_flags_fix_header = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_fix_header = 0x00000000;
            bool common_fix_header_ec {false};
            CommonStructMember common_fix_header {TypeObjectUtils::build_common_struct_member(member_id_fix_header, member_flags_fix_header, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_fix_header, common_fix_header_ec))};
            if (!common_fix_header_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure fix_header member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_fix_header = "fix_header";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_fix_header;
            ann_custom_SecurityListRequest.reset();
            CompleteMemberDetail detail_fix_header = TypeObjectUtils::build_complete_member_detail(name_fix_header, member_ann_builtin_fix_header, ann_custom_SecurityListRequest);
            CompleteStructMember member_fix_header = TypeObjectUtils::build_complete_struct_member(common_fix_header, detail_fix_header);
            TypeObjectUtils::add_complete_struct_member(member_seq_SecurityListRequest, member_fix_header);
        }
        {
            TypeIdentifierPair type_ids_DATS_Source;
            ReturnCode_t return_code_DATS_Source {eprosima::fastdds::dds::RETCODE_OK};
            return_code_DATS_Source =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_DATS_Source);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_DATS_Source)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_DATS_Source))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_DATS_Source = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_DATS_Source = 0x00000001;
            bool common_DATS_Source_ec {false};
            CommonStructMember common_DATS_Source {TypeObjectUtils::build_common_struct_member(member_id_DATS_Source, member_flags_DATS_Source, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_DATS_Source, common_DATS_Source_ec))};
            if (!common_DATS_Source_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure DATS_Source member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_DATS_Source = "DATS_Source";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_DATS_Source;
            ann_custom_SecurityListRequest.reset();
            CompleteMemberDetail detail_DATS_Source = TypeObjectUtils::build_complete_member_detail(name_DATS_Source, member_ann_builtin_DATS_Source, ann_custom_SecurityListRequest);
            CompleteStructMember member_DATS_Source = TypeObjectUtils::build_complete_struct_member(common_DATS_Source, detail_DATS_Source);
            TypeObjectUtils::add_complete_struct_member(member_seq_SecurityListRequest, member_DATS_Source);
        }
        {
            TypeIdentifierPair type_ids_DATS_Destination;
            ReturnCode_t return_code_DATS_Destination {eprosima::fastdds::dds::RETCODE_OK};
            return_code_DATS_Destination =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_DATS_Destination);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_DATS_Destination)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_DATS_Destination))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_DATS_Destination = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_DATS_Destination = 0x00000002;
            bool common_DATS_Destination_ec {false};
            CommonStructMember common_DATS_Destination {TypeObjectUtils::build_common_struct_member(member_id_DATS_Destination, member_flags_DATS_Destination, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_DATS_Destination, common_DATS_Destination_ec))};
            if (!common_DATS_Destination_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure DATS_Destination member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_DATS_Destination = "DATS_Destination";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_DATS_Destination;
            ann_custom_SecurityListRequest.reset();
            CompleteMemberDetail detail_DATS_Destination = TypeObjectUtils::build_complete_member_detail(name_DATS_Destination, member_ann_builtin_DATS_Destination, ann_custom_SecurityListRequest);
            CompleteStructMember member_DATS_Destination = TypeObjectUtils::build_complete_struct_member(common_DATS_Destination, detail_DATS_Destination);
            TypeObjectUtils::add_complete_struct_member(member_seq_SecurityListRequest, member_DATS_Destination);
        }
        {
            TypeIdentifierPair type_ids_DATS_SourceUser;
            ReturnCode_t return_code_DATS_SourceUser {eprosima::fastdds::dds::RETCODE_OK};
            return_code_DATS_SourceUser =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_DATS_SourceUser);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_DATS_SourceUser)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_DATS_SourceUser))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_DATS_SourceUser = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_DATS_SourceUser = 0x00000003;
            bool common_DATS_SourceUser_ec {false};
            CommonStructMember common_DATS_SourceUser {TypeObjectUtils::build_common_struct_member(member_id_DATS_SourceUser, member_flags_DATS_SourceUser, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_DATS_SourceUser, common_DATS_SourceUser_ec))};
            if (!common_DATS_SourceUser_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure DATS_SourceUser member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_DATS_SourceUser = "DATS_SourceUser";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_DATS_SourceUser;
            ann_custom_SecurityListRequest.reset();
            CompleteMemberDetail detail_DATS_SourceUser = TypeObjectUtils::build_complete_member_detail(name_DATS_SourceUser, member_ann_builtin_DATS_SourceUser, ann_custom_SecurityListRequest);
            CompleteStructMember member_DATS_SourceUser = TypeObjectUtils::build_complete_struct_member(common_DATS_SourceUser, detail_DATS_SourceUser);
            TypeObjectUtils::add_complete_struct_member(member_seq_SecurityListRequest, member_DATS_SourceUser);
        }
        {
            TypeIdentifierPair type_ids_DATS_DestinationUser;
            ReturnCode_t return_code_DATS_DestinationUser {eprosima::fastdds::dds::RETCODE_OK};
            return_code_DATS_DestinationUser =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_DATS_DestinationUser);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_DATS_DestinationUser)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_DATS_DestinationUser))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_DATS_DestinationUser = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_DATS_DestinationUser = 0x00000004;
            bool common_DATS_DestinationUser_ec {false};
            CommonStructMember common_DATS_DestinationUser {TypeObjectUtils::build_common_struct_member(member_id_DATS_DestinationUser, member_flags_DATS_DestinationUser, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_DATS_DestinationUser, common_DATS_DestinationUser_ec))};
            if (!common_DATS_DestinationUser_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure DATS_DestinationUser member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_DATS_DestinationUser = "DATS_DestinationUser";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_DATS_DestinationUser;
            ann_custom_SecurityListRequest.reset();
            CompleteMemberDetail detail_DATS_DestinationUser = TypeObjectUtils::build_complete_member_detail(name_DATS_DestinationUser, member_ann_builtin_DATS_DestinationUser, ann_custom_SecurityListRequest);
            CompleteStructMember member_DATS_DestinationUser = TypeObjectUtils::build_complete_struct_member(common_DATS_DestinationUser, detail_DATS_DestinationUser);
            TypeObjectUtils::add_complete_struct_member(member_seq_SecurityListRequest, member_DATS_DestinationUser);
        }
        {
            TypeIdentifierPair type_ids_SecurityReqID;
            ReturnCode_t return_code_SecurityReqID {eprosima::fastdds::dds::RETCODE_OK};
            return_code_SecurityReqID =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_SecurityReqID);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_SecurityReqID)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_SecurityReqID))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_SecurityReqID = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_SecurityReqID = 0x00000005;
            bool common_SecurityReqID_ec {false};
            CommonStructMember common_SecurityReqID {TypeObjectUtils::build_common_struct_member(member_id_SecurityReqID, member_flags_SecurityReqID, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_SecurityReqID, common_SecurityReqID_ec))};
            if (!common_SecurityReqID_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure SecurityReqID member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_SecurityReqID = "SecurityReqID";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_SecurityReqID;
            ann_custom_SecurityListRequest.reset();
            CompleteMemberDetail detail_SecurityReqID = TypeObjectUtils::build_complete_member_detail(name_SecurityReqID, member_ann_builtin_SecurityReqID, ann_custom_SecurityListRequest);
            CompleteStructMember member_SecurityReqID = TypeObjectUtils::build_complete_struct_member(common_SecurityReqID, detail_SecurityReqID);
            TypeObjectUtils::add_complete_struct_member(member_seq_SecurityListRequest, member_SecurityReqID);
        }
        {
            TypeIdentifierPair type_ids_SecurityListRequestType;
            ReturnCode_t return_code_SecurityListRequestType {eprosima::fastdds::dds::RETCODE_OK};
            return_code_SecurityListRequestType =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_SecurityListRequestType);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_SecurityListRequestType)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SecurityListRequestType Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_SecurityListRequestType = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_SecurityListRequestType = 0x00000006;
            bool common_SecurityListRequestType_ec {false};
            CommonStructMember common_SecurityListRequestType {TypeObjectUtils::build_common_struct_member(member_id_SecurityListRequestType, member_flags_SecurityListRequestType, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_SecurityListRequestType, common_SecurityListRequestType_ec))};
            if (!common_SecurityListRequestType_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure SecurityListRequestType member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_SecurityListRequestType = "SecurityListRequestType";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_SecurityListRequestType;
            ann_custom_SecurityListRequest.reset();
            CompleteMemberDetail detail_SecurityListRequestType = TypeObjectUtils::build_complete_member_detail(name_SecurityListRequestType, member_ann_builtin_SecurityListRequestType, ann_custom_SecurityListRequest);
            CompleteStructMember member_SecurityListRequestType = TypeObjectUtils::build_complete_struct_member(common_SecurityListRequestType, detail_SecurityListRequestType);
            TypeObjectUtils::add_complete_struct_member(member_seq_SecurityListRequest, member_SecurityListRequestType);
        }
        {
            TypeIdentifierPair type_ids_Symbol;
            ReturnCode_t return_code_Symbol {eprosima::fastdds::dds::RETCODE_OK};
            return_code_Symbol =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_Symbol);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_Symbol)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_Symbol))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_Symbol = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_Symbol = 0x00000007;
            bool common_Symbol_ec {false};
            CommonStructMember common_Symbol {TypeObjectUtils::build_common_struct_member(member_id_Symbol, member_flags_Symbol, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_Symbol, common_Symbol_ec))};
            if (!common_Symbol_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure Symbol member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_Symbol = "Symbol";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Symbol;
            ann_custom_SecurityListRequest.reset();
            CompleteMemberDetail detail_Symbol = TypeObjectUtils::build_complete_member_detail(name_Symbol, member_ann_builtin_Symbol, ann_custom_SecurityListRequest);
            CompleteStructMember member_Symbol = TypeObjectUtils::build_complete_struct_member(common_Symbol, detail_Symbol);
            TypeObjectUtils::add_complete_struct_member(member_seq_SecurityListRequest, member_Symbol);
        }
        {
            TypeIdentifierPair type_ids_SecurityExchange;
            ReturnCode_t return_code_SecurityExchange {eprosima::fastdds::dds::RETCODE_OK};
            return_code_SecurityExchange =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_SecurityExchange);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_SecurityExchange)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_SecurityExchange))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_SecurityExchange = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_SecurityExchange = 0x00000008;
            bool common_SecurityExchange_ec {false};
            CommonStructMember common_SecurityExchange {TypeObjectUtils::build_common_struct_member(member_id_SecurityExchange, member_flags_SecurityExchange, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_SecurityExchange, common_SecurityExchange_ec))};
            if (!common_SecurityExchange_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure SecurityExchange member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_SecurityExchange = "SecurityExchange";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_SecurityExchange;
            ann_custom_SecurityListRequest.reset();
            CompleteMemberDetail detail_SecurityExchange = TypeObjectUtils::build_complete_member_detail(name_SecurityExchange, member_ann_builtin_SecurityExchange, ann_custom_SecurityListRequest);
            CompleteStructMember member_SecurityExchange = TypeObjectUtils::build_complete_struct_member(common_SecurityExchange, detail_SecurityExchange);
            TypeObjectUtils::add_complete_struct_member(member_seq_SecurityListRequest, member_SecurityExchange);
        }
        {
            TypeIdentifierPair type_ids_Text;
            ReturnCode_t return_code_Text {eprosima::fastdds::dds::RETCODE_OK};
            return_code_Text =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_Text);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_Text)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_Text))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_Text = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_Text = 0x00000009;
            bool common_Text_ec {false};
            CommonStructMember common_Text {TypeObjectUtils::build_common_struct_member(member_id_Text, member_flags_Text, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_Text, common_Text_ec))};
            if (!common_Text_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure Text member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_Text = "Text";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Text;
            ann_custom_SecurityListRequest.reset();
            CompleteMemberDetail detail_Text = TypeObjectUtils::build_complete_member_detail(name_Text, member_ann_builtin_Text, ann_custom_SecurityListRequest);
            CompleteStructMember member_Text = TypeObjectUtils::build_complete_struct_member(common_Text, detail_Text);
            TypeObjectUtils::add_complete_struct_member(member_seq_SecurityListRequest, member_Text);
        }
        CompleteStructType struct_type_SecurityListRequest = TypeObjectUtils::build_complete_struct_type(struct_flags_SecurityListRequest, header_SecurityListRequest, member_seq_SecurityListRequest);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SecurityListRequest, type_name_SecurityListRequest.to_string(), type_ids_SecurityListRequest))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "DistributedATS_SecurityListRequest::SecurityListRequest already registered in TypeObjectRegistry for a different type.");
        }
    }
}

} // namespace DistributedATS_SecurityListRequest


// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MarketDataSnapshotFullRefreshTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen (version: 4.1.0).
 */

#include "MarketDataSnapshotFullRefreshTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "MarketDataSnapshotFullRefresh.hpp"

#include "Header.hpp"

using namespace eprosima::fastdds::dds::xtypes;

namespace DistributedATS_MarketDataSnapshotFullRefresh {
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_NoMDEntries_type_identifier(
        TypeIdentifierPair& type_ids_NoMDEntries)
{

    ReturnCode_t return_code_NoMDEntries {eprosima::fastdds::dds::RETCODE_OK};
    return_code_NoMDEntries =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "DistributedATS_MarketDataSnapshotFullRefresh::NoMDEntries", type_ids_NoMDEntries);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_NoMDEntries)
    {
        StructTypeFlag struct_flags_NoMDEntries = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_NoMDEntries = "DistributedATS_MarketDataSnapshotFullRefresh::NoMDEntries";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_NoMDEntries;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_NoMDEntries;
        CompleteTypeDetail detail_NoMDEntries = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_NoMDEntries, ann_custom_NoMDEntries, type_name_NoMDEntries.to_string());
        CompleteStructHeader header_NoMDEntries;
        header_NoMDEntries = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_NoMDEntries);
        CompleteStructMemberSeq member_seq_NoMDEntries;
        {
            TypeIdentifierPair type_ids_MDEntryType;
            ReturnCode_t return_code_MDEntryType {eprosima::fastdds::dds::RETCODE_OK};
            return_code_MDEntryType =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_char", type_ids_MDEntryType);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_MDEntryType)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "MDEntryType Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_MDEntryType = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_MDEntryType = 0x00000000;
            bool common_MDEntryType_ec {false};
            CommonStructMember common_MDEntryType {TypeObjectUtils::build_common_struct_member(member_id_MDEntryType, member_flags_MDEntryType, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_MDEntryType, common_MDEntryType_ec))};
            if (!common_MDEntryType_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure MDEntryType member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_MDEntryType = "MDEntryType";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MDEntryType;
            ann_custom_NoMDEntries.reset();
            CompleteMemberDetail detail_MDEntryType = TypeObjectUtils::build_complete_member_detail(name_MDEntryType, member_ann_builtin_MDEntryType, ann_custom_NoMDEntries);
            CompleteStructMember member_MDEntryType = TypeObjectUtils::build_complete_struct_member(common_MDEntryType, detail_MDEntryType);
            TypeObjectUtils::add_complete_struct_member(member_seq_NoMDEntries, member_MDEntryType);
        }
        {
            TypeIdentifierPair type_ids_MDEntryPx;
            ReturnCode_t return_code_MDEntryPx {eprosima::fastdds::dds::RETCODE_OK};
            return_code_MDEntryPx =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_MDEntryPx);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_MDEntryPx)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "MDEntryPx Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_MDEntryPx = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_MDEntryPx = 0x00000001;
            bool common_MDEntryPx_ec {false};
            CommonStructMember common_MDEntryPx {TypeObjectUtils::build_common_struct_member(member_id_MDEntryPx, member_flags_MDEntryPx, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_MDEntryPx, common_MDEntryPx_ec))};
            if (!common_MDEntryPx_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure MDEntryPx member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_MDEntryPx = "MDEntryPx";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MDEntryPx;
            ann_custom_NoMDEntries.reset();
            CompleteMemberDetail detail_MDEntryPx = TypeObjectUtils::build_complete_member_detail(name_MDEntryPx, member_ann_builtin_MDEntryPx, ann_custom_NoMDEntries);
            CompleteStructMember member_MDEntryPx = TypeObjectUtils::build_complete_struct_member(common_MDEntryPx, detail_MDEntryPx);
            TypeObjectUtils::add_complete_struct_member(member_seq_NoMDEntries, member_MDEntryPx);
        }
        {
            TypeIdentifierPair type_ids_MDEntrySize;
            ReturnCode_t return_code_MDEntrySize {eprosima::fastdds::dds::RETCODE_OK};
            return_code_MDEntrySize =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_MDEntrySize);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_MDEntrySize)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "MDEntrySize Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_MDEntrySize = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_MDEntrySize = 0x00000002;
            bool common_MDEntrySize_ec {false};
            CommonStructMember common_MDEntrySize {TypeObjectUtils::build_common_struct_member(member_id_MDEntrySize, member_flags_MDEntrySize, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_MDEntrySize, common_MDEntrySize_ec))};
            if (!common_MDEntrySize_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure MDEntrySize member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_MDEntrySize = "MDEntrySize";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MDEntrySize;
            ann_custom_NoMDEntries.reset();
            CompleteMemberDetail detail_MDEntrySize = TypeObjectUtils::build_complete_member_detail(name_MDEntrySize, member_ann_builtin_MDEntrySize, ann_custom_NoMDEntries);
            CompleteStructMember member_MDEntrySize = TypeObjectUtils::build_complete_struct_member(common_MDEntrySize, detail_MDEntrySize);
            TypeObjectUtils::add_complete_struct_member(member_seq_NoMDEntries, member_MDEntrySize);
        }
        {
            TypeIdentifierPair type_ids_TimeInForce;
            ReturnCode_t return_code_TimeInForce {eprosima::fastdds::dds::RETCODE_OK};
            return_code_TimeInForce =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_char", type_ids_TimeInForce);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_TimeInForce)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "TimeInForce Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_TimeInForce = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_TimeInForce = 0x00000003;
            bool common_TimeInForce_ec {false};
            CommonStructMember common_TimeInForce {TypeObjectUtils::build_common_struct_member(member_id_TimeInForce, member_flags_TimeInForce, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_TimeInForce, common_TimeInForce_ec))};
            if (!common_TimeInForce_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure TimeInForce member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_TimeInForce = "TimeInForce";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_TimeInForce;
            ann_custom_NoMDEntries.reset();
            CompleteMemberDetail detail_TimeInForce = TypeObjectUtils::build_complete_member_detail(name_TimeInForce, member_ann_builtin_TimeInForce, ann_custom_NoMDEntries);
            CompleteStructMember member_TimeInForce = TypeObjectUtils::build_complete_struct_member(common_TimeInForce, detail_TimeInForce);
            TypeObjectUtils::add_complete_struct_member(member_seq_NoMDEntries, member_TimeInForce);
        }
        {
            TypeIdentifierPair type_ids_ExecInst;
            ReturnCode_t return_code_ExecInst {eprosima::fastdds::dds::RETCODE_OK};
            return_code_ExecInst =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_ExecInst);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_ExecInst)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_ExecInst))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_ExecInst = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_ExecInst = 0x00000004;
            bool common_ExecInst_ec {false};
            CommonStructMember common_ExecInst {TypeObjectUtils::build_common_struct_member(member_id_ExecInst, member_flags_ExecInst, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_ExecInst, common_ExecInst_ec))};
            if (!common_ExecInst_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure ExecInst member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_ExecInst = "ExecInst";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ExecInst;
            ann_custom_NoMDEntries.reset();
            CompleteMemberDetail detail_ExecInst = TypeObjectUtils::build_complete_member_detail(name_ExecInst, member_ann_builtin_ExecInst, ann_custom_NoMDEntries);
            CompleteStructMember member_ExecInst = TypeObjectUtils::build_complete_struct_member(common_ExecInst, detail_ExecInst);
            TypeObjectUtils::add_complete_struct_member(member_seq_NoMDEntries, member_ExecInst);
        }
        {
            TypeIdentifierPair type_ids_Text;
            ReturnCode_t return_code_Text {eprosima::fastdds::dds::RETCODE_OK};
            return_code_Text =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_Text);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_Text)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_Text))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_Text = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_Text = 0x00000005;
            bool common_Text_ec {false};
            CommonStructMember common_Text {TypeObjectUtils::build_common_struct_member(member_id_Text, member_flags_Text, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_Text, common_Text_ec))};
            if (!common_Text_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure Text member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_Text = "Text";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Text;
            ann_custom_NoMDEntries.reset();
            CompleteMemberDetail detail_Text = TypeObjectUtils::build_complete_member_detail(name_Text, member_ann_builtin_Text, ann_custom_NoMDEntries);
            CompleteStructMember member_Text = TypeObjectUtils::build_complete_struct_member(common_Text, detail_Text);
            TypeObjectUtils::add_complete_struct_member(member_seq_NoMDEntries, member_Text);
        }
        CompleteStructType struct_type_NoMDEntries = TypeObjectUtils::build_complete_struct_type(struct_flags_NoMDEntries, header_NoMDEntries, member_seq_NoMDEntries);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_NoMDEntries, type_name_NoMDEntries.to_string(), type_ids_NoMDEntries))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "DistributedATS_MarketDataSnapshotFullRefresh::NoMDEntries already registered in TypeObjectRegistry for a different type.");
        }
    }
}
void register_NoMDEntriesSeq_type_identifier(
        TypeIdentifierPair& type_ids_NoMDEntriesSeq)
{
    ReturnCode_t return_code_NoMDEntriesSeq {eprosima::fastdds::dds::RETCODE_OK};
    return_code_NoMDEntriesSeq =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "DistributedATS_MarketDataSnapshotFullRefresh::NoMDEntriesSeq", type_ids_NoMDEntriesSeq);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_NoMDEntriesSeq)
    {
        AliasTypeFlag alias_flags_NoMDEntriesSeq = 0;
        QualifiedTypeName type_name_NoMDEntriesSeq = "DistributedATS_MarketDataSnapshotFullRefresh::NoMDEntriesSeq";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_NoMDEntriesSeq;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_NoMDEntriesSeq;
        CompleteTypeDetail detail_NoMDEntriesSeq = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_NoMDEntriesSeq, ann_custom_NoMDEntriesSeq, type_name_NoMDEntriesSeq.to_string());
        CompleteAliasHeader header_NoMDEntriesSeq = TypeObjectUtils::build_complete_alias_header(detail_NoMDEntriesSeq);
        AliasMemberFlag related_flags_NoMDEntriesSeq = 0;
        return_code_NoMDEntriesSeq =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "anonymous_sequence_DistributedATS_MarketDataSnapshotFullRefresh_NoMDEntries_unbounded", type_ids_NoMDEntriesSeq);

        if (eprosima::fastdds::dds::RETCODE_OK != return_code_NoMDEntriesSeq)
        {
            return_code_NoMDEntriesSeq =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "DistributedATS_MarketDataSnapshotFullRefresh::NoMDEntries", type_ids_NoMDEntriesSeq);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_NoMDEntriesSeq)
            {
                DistributedATS_MarketDataSnapshotFullRefresh::register_NoMDEntries_type_identifier(type_ids_NoMDEntriesSeq);
            }
            bool element_identifier_anonymous_sequence_DistributedATS_MarketDataSnapshotFullRefresh_NoMDEntries_unbounded_ec {false};
            TypeIdentifier* element_identifier_anonymous_sequence_DistributedATS_MarketDataSnapshotFullRefresh_NoMDEntries_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_NoMDEntriesSeq, element_identifier_anonymous_sequence_DistributedATS_MarketDataSnapshotFullRefresh_NoMDEntries_unbounded_ec))};
            if (!element_identifier_anonymous_sequence_DistributedATS_MarketDataSnapshotFullRefresh_NoMDEntries_unbounded_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Sequence element TypeIdentifier inconsistent.");
                return;
            }
            EquivalenceKind equiv_kind_anonymous_sequence_DistributedATS_MarketDataSnapshotFullRefresh_NoMDEntries_unbounded = EK_COMPLETE;
            if (TK_NONE == type_ids_NoMDEntriesSeq.type_identifier2()._d())
            {
                equiv_kind_anonymous_sequence_DistributedATS_MarketDataSnapshotFullRefresh_NoMDEntries_unbounded = EK_BOTH;
            }
            CollectionElementFlag element_flags_anonymous_sequence_DistributedATS_MarketDataSnapshotFullRefresh_NoMDEntries_unbounded = 0;
            PlainCollectionHeader header_anonymous_sequence_DistributedATS_MarketDataSnapshotFullRefresh_NoMDEntries_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_DistributedATS_MarketDataSnapshotFullRefresh_NoMDEntries_unbounded, element_flags_anonymous_sequence_DistributedATS_MarketDataSnapshotFullRefresh_NoMDEntries_unbounded);
            {
                SBound bound = 0;
                PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_DistributedATS_MarketDataSnapshotFullRefresh_NoMDEntries_unbounded, bound,
                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_DistributedATS_MarketDataSnapshotFullRefresh_NoMDEntries_unbounded));
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_DistributedATS_MarketDataSnapshotFullRefresh_NoMDEntries_unbounded", type_ids_NoMDEntriesSeq))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_sequence_DistributedATS_MarketDataSnapshotFullRefresh_NoMDEntries_unbounded already registered in TypeObjectRegistry for a different type.");
                }
            }
        }
        bool common_NoMDEntriesSeq_ec {false};
        CommonAliasBody common_NoMDEntriesSeq {TypeObjectUtils::build_common_alias_body(related_flags_NoMDEntriesSeq,
                TypeObjectUtils::retrieve_complete_type_identifier(type_ids_NoMDEntriesSeq, common_NoMDEntriesSeq_ec))};
        if (!common_NoMDEntriesSeq_ec)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "DistributedATS_MarketDataSnapshotFullRefresh::NoMDEntriesSeq related TypeIdentifier inconsistent.");
            return;
        }
        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_NoMDEntriesSeq;
        ann_custom_NoMDEntriesSeq.reset();
        CompleteAliasBody body_NoMDEntriesSeq = TypeObjectUtils::build_complete_alias_body(common_NoMDEntriesSeq,
                member_ann_builtin_NoMDEntriesSeq, ann_custom_NoMDEntriesSeq);
        CompleteAliasType alias_type_NoMDEntriesSeq = TypeObjectUtils::build_complete_alias_type(alias_flags_NoMDEntriesSeq,
                header_NoMDEntriesSeq, body_NoMDEntriesSeq);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_alias_type_object(alias_type_NoMDEntriesSeq,
                    type_name_NoMDEntriesSeq.to_string(), type_ids_NoMDEntriesSeq))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                "DistributedATS_MarketDataSnapshotFullRefresh::NoMDEntriesSeq already registered in TypeObjectRegistry for a different type.");
        }
    }
}

// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_MarketDataSnapshotFullRefresh_type_identifier(
        TypeIdentifierPair& type_ids_MarketDataSnapshotFullRefresh)
{

    ReturnCode_t return_code_MarketDataSnapshotFullRefresh {eprosima::fastdds::dds::RETCODE_OK};
    return_code_MarketDataSnapshotFullRefresh =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "DistributedATS_MarketDataSnapshotFullRefresh::MarketDataSnapshotFullRefresh", type_ids_MarketDataSnapshotFullRefresh);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_MarketDataSnapshotFullRefresh)
    {
        StructTypeFlag struct_flags_MarketDataSnapshotFullRefresh = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_MarketDataSnapshotFullRefresh = "DistributedATS_MarketDataSnapshotFullRefresh::MarketDataSnapshotFullRefresh";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MarketDataSnapshotFullRefresh;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MarketDataSnapshotFullRefresh;
        CompleteTypeDetail detail_MarketDataSnapshotFullRefresh = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MarketDataSnapshotFullRefresh, ann_custom_MarketDataSnapshotFullRefresh, type_name_MarketDataSnapshotFullRefresh.to_string());
        CompleteStructHeader header_MarketDataSnapshotFullRefresh;
        header_MarketDataSnapshotFullRefresh = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MarketDataSnapshotFullRefresh);
        CompleteStructMemberSeq member_seq_MarketDataSnapshotFullRefresh;
        {
            TypeIdentifierPair type_ids_fix_header;
            ReturnCode_t return_code_fix_header {eprosima::fastdds::dds::RETCODE_OK};
            return_code_fix_header =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "DistributedATS::Header", type_ids_fix_header);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_fix_header)
            {
                DistributedATS::register_Header_type_identifier(type_ids_fix_header);
            }
            StructMemberFlag member_flags_fix_header = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_fix_header = 0x00000000;
            bool common_fix_header_ec {false};
            CommonStructMember common_fix_header {TypeObjectUtils::build_common_struct_member(member_id_fix_header, member_flags_fix_header, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_fix_header, common_fix_header_ec))};
            if (!common_fix_header_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure fix_header member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_fix_header = "fix_header";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_fix_header;
            ann_custom_MarketDataSnapshotFullRefresh.reset();
            CompleteMemberDetail detail_fix_header = TypeObjectUtils::build_complete_member_detail(name_fix_header, member_ann_builtin_fix_header, ann_custom_MarketDataSnapshotFullRefresh);
            CompleteStructMember member_fix_header = TypeObjectUtils::build_complete_struct_member(common_fix_header, detail_fix_header);
            TypeObjectUtils::add_complete_struct_member(member_seq_MarketDataSnapshotFullRefresh, member_fix_header);
        }
        {
            TypeIdentifierPair type_ids_DATS_Source;
            ReturnCode_t return_code_DATS_Source {eprosima::fastdds::dds::RETCODE_OK};
            return_code_DATS_Source =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_DATS_Source);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_DATS_Source)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_DATS_Source))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_DATS_Source = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_DATS_Source = 0x00000001;
            bool common_DATS_Source_ec {false};
            CommonStructMember common_DATS_Source {TypeObjectUtils::build_common_struct_member(member_id_DATS_Source, member_flags_DATS_Source, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_DATS_Source, common_DATS_Source_ec))};
            if (!common_DATS_Source_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure DATS_Source member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_DATS_Source = "DATS_Source";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_DATS_Source;
            ann_custom_MarketDataSnapshotFullRefresh.reset();
            CompleteMemberDetail detail_DATS_Source = TypeObjectUtils::build_complete_member_detail(name_DATS_Source, member_ann_builtin_DATS_Source, ann_custom_MarketDataSnapshotFullRefresh);
            CompleteStructMember member_DATS_Source = TypeObjectUtils::build_complete_struct_member(common_DATS_Source, detail_DATS_Source);
            TypeObjectUtils::add_complete_struct_member(member_seq_MarketDataSnapshotFullRefresh, member_DATS_Source);
        }
        {
            TypeIdentifierPair type_ids_DATS_Destination;
            ReturnCode_t return_code_DATS_Destination {eprosima::fastdds::dds::RETCODE_OK};
            return_code_DATS_Destination =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_DATS_Destination);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_DATS_Destination)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_DATS_Destination))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_DATS_Destination = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_DATS_Destination = 0x00000002;
            bool common_DATS_Destination_ec {false};
            CommonStructMember common_DATS_Destination {TypeObjectUtils::build_common_struct_member(member_id_DATS_Destination, member_flags_DATS_Destination, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_DATS_Destination, common_DATS_Destination_ec))};
            if (!common_DATS_Destination_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure DATS_Destination member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_DATS_Destination = "DATS_Destination";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_DATS_Destination;
            ann_custom_MarketDataSnapshotFullRefresh.reset();
            CompleteMemberDetail detail_DATS_Destination = TypeObjectUtils::build_complete_member_detail(name_DATS_Destination, member_ann_builtin_DATS_Destination, ann_custom_MarketDataSnapshotFullRefresh);
            CompleteStructMember member_DATS_Destination = TypeObjectUtils::build_complete_struct_member(common_DATS_Destination, detail_DATS_Destination);
            TypeObjectUtils::add_complete_struct_member(member_seq_MarketDataSnapshotFullRefresh, member_DATS_Destination);
        }
        {
            TypeIdentifierPair type_ids_DATS_SourceUser;
            ReturnCode_t return_code_DATS_SourceUser {eprosima::fastdds::dds::RETCODE_OK};
            return_code_DATS_SourceUser =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_DATS_SourceUser);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_DATS_SourceUser)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_DATS_SourceUser))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_DATS_SourceUser = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_DATS_SourceUser = 0x00000003;
            bool common_DATS_SourceUser_ec {false};
            CommonStructMember common_DATS_SourceUser {TypeObjectUtils::build_common_struct_member(member_id_DATS_SourceUser, member_flags_DATS_SourceUser, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_DATS_SourceUser, common_DATS_SourceUser_ec))};
            if (!common_DATS_SourceUser_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure DATS_SourceUser member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_DATS_SourceUser = "DATS_SourceUser";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_DATS_SourceUser;
            ann_custom_MarketDataSnapshotFullRefresh.reset();
            CompleteMemberDetail detail_DATS_SourceUser = TypeObjectUtils::build_complete_member_detail(name_DATS_SourceUser, member_ann_builtin_DATS_SourceUser, ann_custom_MarketDataSnapshotFullRefresh);
            CompleteStructMember member_DATS_SourceUser = TypeObjectUtils::build_complete_struct_member(common_DATS_SourceUser, detail_DATS_SourceUser);
            TypeObjectUtils::add_complete_struct_member(member_seq_MarketDataSnapshotFullRefresh, member_DATS_SourceUser);
        }
        {
            TypeIdentifierPair type_ids_DATS_DestinationUser;
            ReturnCode_t return_code_DATS_DestinationUser {eprosima::fastdds::dds::RETCODE_OK};
            return_code_DATS_DestinationUser =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_DATS_DestinationUser);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_DATS_DestinationUser)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_DATS_DestinationUser))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_DATS_DestinationUser = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_DATS_DestinationUser = 0x00000004;
            bool common_DATS_DestinationUser_ec {false};
            CommonStructMember common_DATS_DestinationUser {TypeObjectUtils::build_common_struct_member(member_id_DATS_DestinationUser, member_flags_DATS_DestinationUser, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_DATS_DestinationUser, common_DATS_DestinationUser_ec))};
            if (!common_DATS_DestinationUser_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure DATS_DestinationUser member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_DATS_DestinationUser = "DATS_DestinationUser";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_DATS_DestinationUser;
            ann_custom_MarketDataSnapshotFullRefresh.reset();
            CompleteMemberDetail detail_DATS_DestinationUser = TypeObjectUtils::build_complete_member_detail(name_DATS_DestinationUser, member_ann_builtin_DATS_DestinationUser, ann_custom_MarketDataSnapshotFullRefresh);
            CompleteStructMember member_DATS_DestinationUser = TypeObjectUtils::build_complete_struct_member(common_DATS_DestinationUser, detail_DATS_DestinationUser);
            TypeObjectUtils::add_complete_struct_member(member_seq_MarketDataSnapshotFullRefresh, member_DATS_DestinationUser);
        }
        {
            TypeIdentifierPair type_ids_MDReqID;
            ReturnCode_t return_code_MDReqID {eprosima::fastdds::dds::RETCODE_OK};
            return_code_MDReqID =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_MDReqID);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_MDReqID)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_MDReqID))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_MDReqID = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_MDReqID = 0x00000005;
            bool common_MDReqID_ec {false};
            CommonStructMember common_MDReqID {TypeObjectUtils::build_common_struct_member(member_id_MDReqID, member_flags_MDReqID, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_MDReqID, common_MDReqID_ec))};
            if (!common_MDReqID_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure MDReqID member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_MDReqID = "MDReqID";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MDReqID;
            ann_custom_MarketDataSnapshotFullRefresh.reset();
            CompleteMemberDetail detail_MDReqID = TypeObjectUtils::build_complete_member_detail(name_MDReqID, member_ann_builtin_MDReqID, ann_custom_MarketDataSnapshotFullRefresh);
            CompleteStructMember member_MDReqID = TypeObjectUtils::build_complete_struct_member(common_MDReqID, detail_MDReqID);
            TypeObjectUtils::add_complete_struct_member(member_seq_MarketDataSnapshotFullRefresh, member_MDReqID);
        }
        {
            TypeIdentifierPair type_ids_Symbol;
            ReturnCode_t return_code_Symbol {eprosima::fastdds::dds::RETCODE_OK};
            return_code_Symbol =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_Symbol);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_Symbol)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_Symbol))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_Symbol = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_Symbol = 0x00000006;
            bool common_Symbol_ec {false};
            CommonStructMember common_Symbol {TypeObjectUtils::build_common_struct_member(member_id_Symbol, member_flags_Symbol, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_Symbol, common_Symbol_ec))};
            if (!common_Symbol_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure Symbol member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_Symbol = "Symbol";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Symbol;
            ann_custom_MarketDataSnapshotFullRefresh.reset();
            CompleteMemberDetail detail_Symbol = TypeObjectUtils::build_complete_member_detail(name_Symbol, member_ann_builtin_Symbol, ann_custom_MarketDataSnapshotFullRefresh);
            CompleteStructMember member_Symbol = TypeObjectUtils::build_complete_struct_member(common_Symbol, detail_Symbol);
            TypeObjectUtils::add_complete_struct_member(member_seq_MarketDataSnapshotFullRefresh, member_Symbol);
        }
        {
            TypeIdentifierPair type_ids_SecurityExchange;
            ReturnCode_t return_code_SecurityExchange {eprosima::fastdds::dds::RETCODE_OK};
            return_code_SecurityExchange =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_SecurityExchange);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_SecurityExchange)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_SecurityExchange))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_SecurityExchange = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_SecurityExchange = 0x00000007;
            bool common_SecurityExchange_ec {false};
            CommonStructMember common_SecurityExchange {TypeObjectUtils::build_common_struct_member(member_id_SecurityExchange, member_flags_SecurityExchange, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_SecurityExchange, common_SecurityExchange_ec))};
            if (!common_SecurityExchange_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure SecurityExchange member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_SecurityExchange = "SecurityExchange";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_SecurityExchange;
            ann_custom_MarketDataSnapshotFullRefresh.reset();
            CompleteMemberDetail detail_SecurityExchange = TypeObjectUtils::build_complete_member_detail(name_SecurityExchange, member_ann_builtin_SecurityExchange, ann_custom_MarketDataSnapshotFullRefresh);
            CompleteStructMember member_SecurityExchange = TypeObjectUtils::build_complete_struct_member(common_SecurityExchange, detail_SecurityExchange);
            TypeObjectUtils::add_complete_struct_member(member_seq_MarketDataSnapshotFullRefresh, member_SecurityExchange);
        }
        {
            TypeIdentifierPair type_ids_c_NoMDEntries;
            ReturnCode_t return_code_c_NoMDEntries {eprosima::fastdds::dds::RETCODE_OK};
            return_code_c_NoMDEntries =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "DistributedATS_MarketDataSnapshotFullRefresh::NoMDEntriesSeq", type_ids_c_NoMDEntries);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_c_NoMDEntries)
            {
                DistributedATS_MarketDataSnapshotFullRefresh::register_NoMDEntriesSeq_type_identifier(type_ids_c_NoMDEntries);
            }
            StructMemberFlag member_flags_c_NoMDEntries = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_c_NoMDEntries = 0x00000008;
            bool common_c_NoMDEntries_ec {false};
            CommonStructMember common_c_NoMDEntries {TypeObjectUtils::build_common_struct_member(member_id_c_NoMDEntries, member_flags_c_NoMDEntries, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_c_NoMDEntries, common_c_NoMDEntries_ec))};
            if (!common_c_NoMDEntries_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure c_NoMDEntries member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_c_NoMDEntries = "c_NoMDEntries";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_c_NoMDEntries;
            ann_custom_MarketDataSnapshotFullRefresh.reset();
            CompleteMemberDetail detail_c_NoMDEntries = TypeObjectUtils::build_complete_member_detail(name_c_NoMDEntries, member_ann_builtin_c_NoMDEntries, ann_custom_MarketDataSnapshotFullRefresh);
            CompleteStructMember member_c_NoMDEntries = TypeObjectUtils::build_complete_struct_member(common_c_NoMDEntries, detail_c_NoMDEntries);
            TypeObjectUtils::add_complete_struct_member(member_seq_MarketDataSnapshotFullRefresh, member_c_NoMDEntries);
        }
        CompleteStructType struct_type_MarketDataSnapshotFullRefresh = TypeObjectUtils::build_complete_struct_type(struct_flags_MarketDataSnapshotFullRefresh, header_MarketDataSnapshotFullRefresh, member_seq_MarketDataSnapshotFullRefresh);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MarketDataSnapshotFullRefresh, type_name_MarketDataSnapshotFullRefresh.to_string(), type_ids_MarketDataSnapshotFullRefresh))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "DistributedATS_MarketDataSnapshotFullRefresh::MarketDataSnapshotFullRefresh already registered in TypeObjectRegistry for a different type.");
        }
    }
}

} // namespace DistributedATS_MarketDataSnapshotFullRefresh


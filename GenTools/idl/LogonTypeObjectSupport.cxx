// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file LogonTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen (version: 4.1.0).
 */

#include "LogonTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "Logon.hpp"

#include "Header.hpp"

using namespace eprosima::fastdds::dds::xtypes;

namespace DistributedATS_Logon {
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_Logon_type_identifier(
        TypeIdentifierPair& type_ids_Logon)
{

    ReturnCode_t return_code_Logon {eprosima::fastdds::dds::RETCODE_OK};
    return_code_Logon =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "DistributedATS_Logon::Logon", type_ids_Logon);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_Logon)
    {
        StructTypeFlag struct_flags_Logon = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_Logon = "DistributedATS_Logon::Logon";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Logon;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Logon;
        CompleteTypeDetail detail_Logon = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_Logon, ann_custom_Logon, type_name_Logon.to_string());
        CompleteStructHeader header_Logon;
        header_Logon = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_Logon);
        CompleteStructMemberSeq member_seq_Logon;
        {
            TypeIdentifierPair type_ids_fix_header;
            ReturnCode_t return_code_fix_header {eprosima::fastdds::dds::RETCODE_OK};
            return_code_fix_header =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "DistributedATS::Header", type_ids_fix_header);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_fix_header)
            {
                DistributedATS::register_Header_type_identifier(type_ids_fix_header);
            }
            StructMemberFlag member_flags_fix_header = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_fix_header = 0x00000000;
            bool common_fix_header_ec {false};
            CommonStructMember common_fix_header {TypeObjectUtils::build_common_struct_member(member_id_fix_header, member_flags_fix_header, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_fix_header, common_fix_header_ec))};
            if (!common_fix_header_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure fix_header member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_fix_header = "fix_header";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_fix_header;
            ann_custom_Logon.reset();
            CompleteMemberDetail detail_fix_header = TypeObjectUtils::build_complete_member_detail(name_fix_header, member_ann_builtin_fix_header, ann_custom_Logon);
            CompleteStructMember member_fix_header = TypeObjectUtils::build_complete_struct_member(common_fix_header, detail_fix_header);
            TypeObjectUtils::add_complete_struct_member(member_seq_Logon, member_fix_header);
        }
        {
            TypeIdentifierPair type_ids_DATS_Source;
            ReturnCode_t return_code_DATS_Source {eprosima::fastdds::dds::RETCODE_OK};
            return_code_DATS_Source =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_DATS_Source);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_DATS_Source)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_DATS_Source))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_DATS_Source = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_DATS_Source = 0x00000001;
            bool common_DATS_Source_ec {false};
            CommonStructMember common_DATS_Source {TypeObjectUtils::build_common_struct_member(member_id_DATS_Source, member_flags_DATS_Source, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_DATS_Source, common_DATS_Source_ec))};
            if (!common_DATS_Source_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure DATS_Source member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_DATS_Source = "DATS_Source";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_DATS_Source;
            ann_custom_Logon.reset();
            CompleteMemberDetail detail_DATS_Source = TypeObjectUtils::build_complete_member_detail(name_DATS_Source, member_ann_builtin_DATS_Source, ann_custom_Logon);
            CompleteStructMember member_DATS_Source = TypeObjectUtils::build_complete_struct_member(common_DATS_Source, detail_DATS_Source);
            TypeObjectUtils::add_complete_struct_member(member_seq_Logon, member_DATS_Source);
        }
        {
            TypeIdentifierPair type_ids_DATS_Destination;
            ReturnCode_t return_code_DATS_Destination {eprosima::fastdds::dds::RETCODE_OK};
            return_code_DATS_Destination =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_DATS_Destination);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_DATS_Destination)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_DATS_Destination))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_DATS_Destination = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_DATS_Destination = 0x00000002;
            bool common_DATS_Destination_ec {false};
            CommonStructMember common_DATS_Destination {TypeObjectUtils::build_common_struct_member(member_id_DATS_Destination, member_flags_DATS_Destination, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_DATS_Destination, common_DATS_Destination_ec))};
            if (!common_DATS_Destination_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure DATS_Destination member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_DATS_Destination = "DATS_Destination";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_DATS_Destination;
            ann_custom_Logon.reset();
            CompleteMemberDetail detail_DATS_Destination = TypeObjectUtils::build_complete_member_detail(name_DATS_Destination, member_ann_builtin_DATS_Destination, ann_custom_Logon);
            CompleteStructMember member_DATS_Destination = TypeObjectUtils::build_complete_struct_member(common_DATS_Destination, detail_DATS_Destination);
            TypeObjectUtils::add_complete_struct_member(member_seq_Logon, member_DATS_Destination);
        }
        {
            TypeIdentifierPair type_ids_DATS_SourceUser;
            ReturnCode_t return_code_DATS_SourceUser {eprosima::fastdds::dds::RETCODE_OK};
            return_code_DATS_SourceUser =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_DATS_SourceUser);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_DATS_SourceUser)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_DATS_SourceUser))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_DATS_SourceUser = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_DATS_SourceUser = 0x00000003;
            bool common_DATS_SourceUser_ec {false};
            CommonStructMember common_DATS_SourceUser {TypeObjectUtils::build_common_struct_member(member_id_DATS_SourceUser, member_flags_DATS_SourceUser, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_DATS_SourceUser, common_DATS_SourceUser_ec))};
            if (!common_DATS_SourceUser_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure DATS_SourceUser member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_DATS_SourceUser = "DATS_SourceUser";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_DATS_SourceUser;
            ann_custom_Logon.reset();
            CompleteMemberDetail detail_DATS_SourceUser = TypeObjectUtils::build_complete_member_detail(name_DATS_SourceUser, member_ann_builtin_DATS_SourceUser, ann_custom_Logon);
            CompleteStructMember member_DATS_SourceUser = TypeObjectUtils::build_complete_struct_member(common_DATS_SourceUser, detail_DATS_SourceUser);
            TypeObjectUtils::add_complete_struct_member(member_seq_Logon, member_DATS_SourceUser);
        }
        {
            TypeIdentifierPair type_ids_DATS_DestinationUser;
            ReturnCode_t return_code_DATS_DestinationUser {eprosima::fastdds::dds::RETCODE_OK};
            return_code_DATS_DestinationUser =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_DATS_DestinationUser);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_DATS_DestinationUser)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_DATS_DestinationUser))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_DATS_DestinationUser = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_DATS_DestinationUser = 0x00000004;
            bool common_DATS_DestinationUser_ec {false};
            CommonStructMember common_DATS_DestinationUser {TypeObjectUtils::build_common_struct_member(member_id_DATS_DestinationUser, member_flags_DATS_DestinationUser, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_DATS_DestinationUser, common_DATS_DestinationUser_ec))};
            if (!common_DATS_DestinationUser_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure DATS_DestinationUser member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_DATS_DestinationUser = "DATS_DestinationUser";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_DATS_DestinationUser;
            ann_custom_Logon.reset();
            CompleteMemberDetail detail_DATS_DestinationUser = TypeObjectUtils::build_complete_member_detail(name_DATS_DestinationUser, member_ann_builtin_DATS_DestinationUser, ann_custom_Logon);
            CompleteStructMember member_DATS_DestinationUser = TypeObjectUtils::build_complete_struct_member(common_DATS_DestinationUser, detail_DATS_DestinationUser);
            TypeObjectUtils::add_complete_struct_member(member_seq_Logon, member_DATS_DestinationUser);
        }
        {
            TypeIdentifierPair type_ids_EncryptMethod;
            ReturnCode_t return_code_EncryptMethod {eprosima::fastdds::dds::RETCODE_OK};
            return_code_EncryptMethod =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_EncryptMethod);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_EncryptMethod)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "EncryptMethod Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_EncryptMethod = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_EncryptMethod = 0x00000005;
            bool common_EncryptMethod_ec {false};
            CommonStructMember common_EncryptMethod {TypeObjectUtils::build_common_struct_member(member_id_EncryptMethod, member_flags_EncryptMethod, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_EncryptMethod, common_EncryptMethod_ec))};
            if (!common_EncryptMethod_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure EncryptMethod member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_EncryptMethod = "EncryptMethod";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_EncryptMethod;
            ann_custom_Logon.reset();
            CompleteMemberDetail detail_EncryptMethod = TypeObjectUtils::build_complete_member_detail(name_EncryptMethod, member_ann_builtin_EncryptMethod, ann_custom_Logon);
            CompleteStructMember member_EncryptMethod = TypeObjectUtils::build_complete_struct_member(common_EncryptMethod, detail_EncryptMethod);
            TypeObjectUtils::add_complete_struct_member(member_seq_Logon, member_EncryptMethod);
        }
        {
            TypeIdentifierPair type_ids_HeartBtInt;
            ReturnCode_t return_code_HeartBtInt {eprosima::fastdds::dds::RETCODE_OK};
            return_code_HeartBtInt =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_HeartBtInt);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_HeartBtInt)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "HeartBtInt Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_HeartBtInt = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_HeartBtInt = 0x00000006;
            bool common_HeartBtInt_ec {false};
            CommonStructMember common_HeartBtInt {TypeObjectUtils::build_common_struct_member(member_id_HeartBtInt, member_flags_HeartBtInt, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_HeartBtInt, common_HeartBtInt_ec))};
            if (!common_HeartBtInt_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure HeartBtInt member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_HeartBtInt = "HeartBtInt";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_HeartBtInt;
            ann_custom_Logon.reset();
            CompleteMemberDetail detail_HeartBtInt = TypeObjectUtils::build_complete_member_detail(name_HeartBtInt, member_ann_builtin_HeartBtInt, ann_custom_Logon);
            CompleteStructMember member_HeartBtInt = TypeObjectUtils::build_complete_struct_member(common_HeartBtInt, detail_HeartBtInt);
            TypeObjectUtils::add_complete_struct_member(member_seq_Logon, member_HeartBtInt);
        }
        {
            TypeIdentifierPair type_ids_RawData;
            ReturnCode_t return_code_RawData {eprosima::fastdds::dds::RETCODE_OK};
            return_code_RawData =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_RawData);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_RawData)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_RawData))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_RawData = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_RawData = 0x00000007;
            bool common_RawData_ec {false};
            CommonStructMember common_RawData {TypeObjectUtils::build_common_struct_member(member_id_RawData, member_flags_RawData, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_RawData, common_RawData_ec))};
            if (!common_RawData_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure RawData member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_RawData = "RawData";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_RawData;
            ann_custom_Logon.reset();
            CompleteMemberDetail detail_RawData = TypeObjectUtils::build_complete_member_detail(name_RawData, member_ann_builtin_RawData, ann_custom_Logon);
            CompleteStructMember member_RawData = TypeObjectUtils::build_complete_struct_member(common_RawData, detail_RawData);
            TypeObjectUtils::add_complete_struct_member(member_seq_Logon, member_RawData);
        }
        {
            TypeIdentifierPair type_ids_Username;
            ReturnCode_t return_code_Username {eprosima::fastdds::dds::RETCODE_OK};
            return_code_Username =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_Username);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_Username)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_Username))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_Username = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_Username = 0x00000008;
            bool common_Username_ec {false};
            CommonStructMember common_Username {TypeObjectUtils::build_common_struct_member(member_id_Username, member_flags_Username, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_Username, common_Username_ec))};
            if (!common_Username_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure Username member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_Username = "Username";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Username;
            ann_custom_Logon.reset();
            CompleteMemberDetail detail_Username = TypeObjectUtils::build_complete_member_detail(name_Username, member_ann_builtin_Username, ann_custom_Logon);
            CompleteStructMember member_Username = TypeObjectUtils::build_complete_struct_member(common_Username, detail_Username);
            TypeObjectUtils::add_complete_struct_member(member_seq_Logon, member_Username);
        }
        {
            TypeIdentifierPair type_ids_Password;
            ReturnCode_t return_code_Password {eprosima::fastdds::dds::RETCODE_OK};
            return_code_Password =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_Password);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_Password)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_Password))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_Password = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_Password = 0x00000009;
            bool common_Password_ec {false};
            CommonStructMember common_Password {TypeObjectUtils::build_common_struct_member(member_id_Password, member_flags_Password, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_Password, common_Password_ec))};
            if (!common_Password_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure Password member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_Password = "Password";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Password;
            ann_custom_Logon.reset();
            CompleteMemberDetail detail_Password = TypeObjectUtils::build_complete_member_detail(name_Password, member_ann_builtin_Password, ann_custom_Logon);
            CompleteStructMember member_Password = TypeObjectUtils::build_complete_struct_member(common_Password, detail_Password);
            TypeObjectUtils::add_complete_struct_member(member_seq_Logon, member_Password);
        }
        CompleteStructType struct_type_Logon = TypeObjectUtils::build_complete_struct_type(struct_flags_Logon, header_Logon, member_seq_Logon);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_Logon, type_name_Logon.to_string(), type_ids_Logon))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "DistributedATS_Logon::Logon already registered in TypeObjectRegistry for a different type.");
        }
    }
}

} // namespace DistributedATS_Logon


// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ExecutionReportTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen (version: 4.1.0).
 */

#include "ExecutionReportTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "ExecutionReport.hpp"

#include "Header.hpp"

using namespace eprosima::fastdds::dds::xtypes;

namespace DistributedATS_ExecutionReport {
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_ExecutionReport_type_identifier(
        TypeIdentifierPair& type_ids_ExecutionReport)
{

    ReturnCode_t return_code_ExecutionReport {eprosima::fastdds::dds::RETCODE_OK};
    return_code_ExecutionReport =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "DistributedATS_ExecutionReport::ExecutionReport", type_ids_ExecutionReport);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_ExecutionReport)
    {
        StructTypeFlag struct_flags_ExecutionReport = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_ExecutionReport = "DistributedATS_ExecutionReport::ExecutionReport";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ExecutionReport;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ExecutionReport;
        CompleteTypeDetail detail_ExecutionReport = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ExecutionReport, ann_custom_ExecutionReport, type_name_ExecutionReport.to_string());
        CompleteStructHeader header_ExecutionReport;
        header_ExecutionReport = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_ExecutionReport);
        CompleteStructMemberSeq member_seq_ExecutionReport;
        {
            TypeIdentifierPair type_ids_fix_header;
            ReturnCode_t return_code_fix_header {eprosima::fastdds::dds::RETCODE_OK};
            return_code_fix_header =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "DistributedATS::Header", type_ids_fix_header);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_fix_header)
            {
                DistributedATS::register_Header_type_identifier(type_ids_fix_header);
            }
            StructMemberFlag member_flags_fix_header = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_fix_header = 0x00000000;
            bool common_fix_header_ec {false};
            CommonStructMember common_fix_header {TypeObjectUtils::build_common_struct_member(member_id_fix_header, member_flags_fix_header, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_fix_header, common_fix_header_ec))};
            if (!common_fix_header_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure fix_header member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_fix_header = "fix_header";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_fix_header;
            ann_custom_ExecutionReport.reset();
            CompleteMemberDetail detail_fix_header = TypeObjectUtils::build_complete_member_detail(name_fix_header, member_ann_builtin_fix_header, ann_custom_ExecutionReport);
            CompleteStructMember member_fix_header = TypeObjectUtils::build_complete_struct_member(common_fix_header, detail_fix_header);
            TypeObjectUtils::add_complete_struct_member(member_seq_ExecutionReport, member_fix_header);
        }
        {
            TypeIdentifierPair type_ids_DATS_Source;
            ReturnCode_t return_code_DATS_Source {eprosima::fastdds::dds::RETCODE_OK};
            return_code_DATS_Source =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_DATS_Source);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_DATS_Source)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_DATS_Source))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_DATS_Source = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_DATS_Source = 0x00000001;
            bool common_DATS_Source_ec {false};
            CommonStructMember common_DATS_Source {TypeObjectUtils::build_common_struct_member(member_id_DATS_Source, member_flags_DATS_Source, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_DATS_Source, common_DATS_Source_ec))};
            if (!common_DATS_Source_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure DATS_Source member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_DATS_Source = "DATS_Source";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_DATS_Source;
            ann_custom_ExecutionReport.reset();
            CompleteMemberDetail detail_DATS_Source = TypeObjectUtils::build_complete_member_detail(name_DATS_Source, member_ann_builtin_DATS_Source, ann_custom_ExecutionReport);
            CompleteStructMember member_DATS_Source = TypeObjectUtils::build_complete_struct_member(common_DATS_Source, detail_DATS_Source);
            TypeObjectUtils::add_complete_struct_member(member_seq_ExecutionReport, member_DATS_Source);
        }
        {
            TypeIdentifierPair type_ids_DATS_Destination;
            ReturnCode_t return_code_DATS_Destination {eprosima::fastdds::dds::RETCODE_OK};
            return_code_DATS_Destination =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_DATS_Destination);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_DATS_Destination)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_DATS_Destination))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_DATS_Destination = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_DATS_Destination = 0x00000002;
            bool common_DATS_Destination_ec {false};
            CommonStructMember common_DATS_Destination {TypeObjectUtils::build_common_struct_member(member_id_DATS_Destination, member_flags_DATS_Destination, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_DATS_Destination, common_DATS_Destination_ec))};
            if (!common_DATS_Destination_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure DATS_Destination member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_DATS_Destination = "DATS_Destination";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_DATS_Destination;
            ann_custom_ExecutionReport.reset();
            CompleteMemberDetail detail_DATS_Destination = TypeObjectUtils::build_complete_member_detail(name_DATS_Destination, member_ann_builtin_DATS_Destination, ann_custom_ExecutionReport);
            CompleteStructMember member_DATS_Destination = TypeObjectUtils::build_complete_struct_member(common_DATS_Destination, detail_DATS_Destination);
            TypeObjectUtils::add_complete_struct_member(member_seq_ExecutionReport, member_DATS_Destination);
        }
        {
            TypeIdentifierPair type_ids_DATS_SourceUser;
            ReturnCode_t return_code_DATS_SourceUser {eprosima::fastdds::dds::RETCODE_OK};
            return_code_DATS_SourceUser =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_DATS_SourceUser);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_DATS_SourceUser)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_DATS_SourceUser))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_DATS_SourceUser = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_DATS_SourceUser = 0x00000003;
            bool common_DATS_SourceUser_ec {false};
            CommonStructMember common_DATS_SourceUser {TypeObjectUtils::build_common_struct_member(member_id_DATS_SourceUser, member_flags_DATS_SourceUser, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_DATS_SourceUser, common_DATS_SourceUser_ec))};
            if (!common_DATS_SourceUser_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure DATS_SourceUser member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_DATS_SourceUser = "DATS_SourceUser";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_DATS_SourceUser;
            ann_custom_ExecutionReport.reset();
            CompleteMemberDetail detail_DATS_SourceUser = TypeObjectUtils::build_complete_member_detail(name_DATS_SourceUser, member_ann_builtin_DATS_SourceUser, ann_custom_ExecutionReport);
            CompleteStructMember member_DATS_SourceUser = TypeObjectUtils::build_complete_struct_member(common_DATS_SourceUser, detail_DATS_SourceUser);
            TypeObjectUtils::add_complete_struct_member(member_seq_ExecutionReport, member_DATS_SourceUser);
        }
        {
            TypeIdentifierPair type_ids_DATS_DestinationUser;
            ReturnCode_t return_code_DATS_DestinationUser {eprosima::fastdds::dds::RETCODE_OK};
            return_code_DATS_DestinationUser =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_DATS_DestinationUser);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_DATS_DestinationUser)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_DATS_DestinationUser))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_DATS_DestinationUser = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_DATS_DestinationUser = 0x00000004;
            bool common_DATS_DestinationUser_ec {false};
            CommonStructMember common_DATS_DestinationUser {TypeObjectUtils::build_common_struct_member(member_id_DATS_DestinationUser, member_flags_DATS_DestinationUser, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_DATS_DestinationUser, common_DATS_DestinationUser_ec))};
            if (!common_DATS_DestinationUser_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure DATS_DestinationUser member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_DATS_DestinationUser = "DATS_DestinationUser";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_DATS_DestinationUser;
            ann_custom_ExecutionReport.reset();
            CompleteMemberDetail detail_DATS_DestinationUser = TypeObjectUtils::build_complete_member_detail(name_DATS_DestinationUser, member_ann_builtin_DATS_DestinationUser, ann_custom_ExecutionReport);
            CompleteStructMember member_DATS_DestinationUser = TypeObjectUtils::build_complete_struct_member(common_DATS_DestinationUser, detail_DATS_DestinationUser);
            TypeObjectUtils::add_complete_struct_member(member_seq_ExecutionReport, member_DATS_DestinationUser);
        }
        {
            TypeIdentifierPair type_ids_OrderID;
            ReturnCode_t return_code_OrderID {eprosima::fastdds::dds::RETCODE_OK};
            return_code_OrderID =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_OrderID);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_OrderID)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_OrderID))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_OrderID = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_OrderID = 0x00000005;
            bool common_OrderID_ec {false};
            CommonStructMember common_OrderID {TypeObjectUtils::build_common_struct_member(member_id_OrderID, member_flags_OrderID, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_OrderID, common_OrderID_ec))};
            if (!common_OrderID_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure OrderID member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_OrderID = "OrderID";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_OrderID;
            ann_custom_ExecutionReport.reset();
            CompleteMemberDetail detail_OrderID = TypeObjectUtils::build_complete_member_detail(name_OrderID, member_ann_builtin_OrderID, ann_custom_ExecutionReport);
            CompleteStructMember member_OrderID = TypeObjectUtils::build_complete_struct_member(common_OrderID, detail_OrderID);
            TypeObjectUtils::add_complete_struct_member(member_seq_ExecutionReport, member_OrderID);
        }
        {
            TypeIdentifierPair type_ids_OrigClOrdID;
            ReturnCode_t return_code_OrigClOrdID {eprosima::fastdds::dds::RETCODE_OK};
            return_code_OrigClOrdID =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_OrigClOrdID);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_OrigClOrdID)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_OrigClOrdID))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_OrigClOrdID = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_OrigClOrdID = 0x00000006;
            bool common_OrigClOrdID_ec {false};
            CommonStructMember common_OrigClOrdID {TypeObjectUtils::build_common_struct_member(member_id_OrigClOrdID, member_flags_OrigClOrdID, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_OrigClOrdID, common_OrigClOrdID_ec))};
            if (!common_OrigClOrdID_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure OrigClOrdID member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_OrigClOrdID = "OrigClOrdID";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_OrigClOrdID;
            ann_custom_ExecutionReport.reset();
            CompleteMemberDetail detail_OrigClOrdID = TypeObjectUtils::build_complete_member_detail(name_OrigClOrdID, member_ann_builtin_OrigClOrdID, ann_custom_ExecutionReport);
            CompleteStructMember member_OrigClOrdID = TypeObjectUtils::build_complete_struct_member(common_OrigClOrdID, detail_OrigClOrdID);
            TypeObjectUtils::add_complete_struct_member(member_seq_ExecutionReport, member_OrigClOrdID);
        }
        {
            TypeIdentifierPair type_ids_ExecID;
            ReturnCode_t return_code_ExecID {eprosima::fastdds::dds::RETCODE_OK};
            return_code_ExecID =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_ExecID);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_ExecID)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_ExecID))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_ExecID = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_ExecID = 0x00000007;
            bool common_ExecID_ec {false};
            CommonStructMember common_ExecID {TypeObjectUtils::build_common_struct_member(member_id_ExecID, member_flags_ExecID, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_ExecID, common_ExecID_ec))};
            if (!common_ExecID_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure ExecID member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_ExecID = "ExecID";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ExecID;
            ann_custom_ExecutionReport.reset();
            CompleteMemberDetail detail_ExecID = TypeObjectUtils::build_complete_member_detail(name_ExecID, member_ann_builtin_ExecID, ann_custom_ExecutionReport);
            CompleteStructMember member_ExecID = TypeObjectUtils::build_complete_struct_member(common_ExecID, detail_ExecID);
            TypeObjectUtils::add_complete_struct_member(member_seq_ExecutionReport, member_ExecID);
        }
        {
            TypeIdentifierPair type_ids_ExecType;
            ReturnCode_t return_code_ExecType {eprosima::fastdds::dds::RETCODE_OK};
            return_code_ExecType =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_char", type_ids_ExecType);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_ExecType)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "ExecType Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_ExecType = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_ExecType = 0x00000008;
            bool common_ExecType_ec {false};
            CommonStructMember common_ExecType {TypeObjectUtils::build_common_struct_member(member_id_ExecType, member_flags_ExecType, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_ExecType, common_ExecType_ec))};
            if (!common_ExecType_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure ExecType member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_ExecType = "ExecType";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ExecType;
            ann_custom_ExecutionReport.reset();
            CompleteMemberDetail detail_ExecType = TypeObjectUtils::build_complete_member_detail(name_ExecType, member_ann_builtin_ExecType, ann_custom_ExecutionReport);
            CompleteStructMember member_ExecType = TypeObjectUtils::build_complete_struct_member(common_ExecType, detail_ExecType);
            TypeObjectUtils::add_complete_struct_member(member_seq_ExecutionReport, member_ExecType);
        }
        {
            TypeIdentifierPair type_ids_OrdStatus;
            ReturnCode_t return_code_OrdStatus {eprosima::fastdds::dds::RETCODE_OK};
            return_code_OrdStatus =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_char", type_ids_OrdStatus);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_OrdStatus)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "OrdStatus Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_OrdStatus = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_OrdStatus = 0x00000009;
            bool common_OrdStatus_ec {false};
            CommonStructMember common_OrdStatus {TypeObjectUtils::build_common_struct_member(member_id_OrdStatus, member_flags_OrdStatus, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_OrdStatus, common_OrdStatus_ec))};
            if (!common_OrdStatus_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure OrdStatus member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_OrdStatus = "OrdStatus";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_OrdStatus;
            ann_custom_ExecutionReport.reset();
            CompleteMemberDetail detail_OrdStatus = TypeObjectUtils::build_complete_member_detail(name_OrdStatus, member_ann_builtin_OrdStatus, ann_custom_ExecutionReport);
            CompleteStructMember member_OrdStatus = TypeObjectUtils::build_complete_struct_member(common_OrdStatus, detail_OrdStatus);
            TypeObjectUtils::add_complete_struct_member(member_seq_ExecutionReport, member_OrdStatus);
        }
        {
            TypeIdentifierPair type_ids_OrdRejReason;
            ReturnCode_t return_code_OrdRejReason {eprosima::fastdds::dds::RETCODE_OK};
            return_code_OrdRejReason =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_OrdRejReason);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_OrdRejReason)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "OrdRejReason Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_OrdRejReason = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_OrdRejReason = 0x0000000a;
            bool common_OrdRejReason_ec {false};
            CommonStructMember common_OrdRejReason {TypeObjectUtils::build_common_struct_member(member_id_OrdRejReason, member_flags_OrdRejReason, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_OrdRejReason, common_OrdRejReason_ec))};
            if (!common_OrdRejReason_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure OrdRejReason member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_OrdRejReason = "OrdRejReason";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_OrdRejReason;
            ann_custom_ExecutionReport.reset();
            CompleteMemberDetail detail_OrdRejReason = TypeObjectUtils::build_complete_member_detail(name_OrdRejReason, member_ann_builtin_OrdRejReason, ann_custom_ExecutionReport);
            CompleteStructMember member_OrdRejReason = TypeObjectUtils::build_complete_struct_member(common_OrdRejReason, detail_OrdRejReason);
            TypeObjectUtils::add_complete_struct_member(member_seq_ExecutionReport, member_OrdRejReason);
        }
        {
            TypeIdentifierPair type_ids_Symbol;
            ReturnCode_t return_code_Symbol {eprosima::fastdds::dds::RETCODE_OK};
            return_code_Symbol =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_Symbol);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_Symbol)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_Symbol))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_Symbol = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_Symbol = 0x0000000b;
            bool common_Symbol_ec {false};
            CommonStructMember common_Symbol {TypeObjectUtils::build_common_struct_member(member_id_Symbol, member_flags_Symbol, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_Symbol, common_Symbol_ec))};
            if (!common_Symbol_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure Symbol member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_Symbol = "Symbol";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Symbol;
            ann_custom_ExecutionReport.reset();
            CompleteMemberDetail detail_Symbol = TypeObjectUtils::build_complete_member_detail(name_Symbol, member_ann_builtin_Symbol, ann_custom_ExecutionReport);
            CompleteStructMember member_Symbol = TypeObjectUtils::build_complete_struct_member(common_Symbol, detail_Symbol);
            TypeObjectUtils::add_complete_struct_member(member_seq_ExecutionReport, member_Symbol);
        }
        {
            TypeIdentifierPair type_ids_SecurityExchange;
            ReturnCode_t return_code_SecurityExchange {eprosima::fastdds::dds::RETCODE_OK};
            return_code_SecurityExchange =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_SecurityExchange);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_SecurityExchange)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_SecurityExchange))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_SecurityExchange = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_SecurityExchange = 0x0000000c;
            bool common_SecurityExchange_ec {false};
            CommonStructMember common_SecurityExchange {TypeObjectUtils::build_common_struct_member(member_id_SecurityExchange, member_flags_SecurityExchange, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_SecurityExchange, common_SecurityExchange_ec))};
            if (!common_SecurityExchange_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure SecurityExchange member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_SecurityExchange = "SecurityExchange";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_SecurityExchange;
            ann_custom_ExecutionReport.reset();
            CompleteMemberDetail detail_SecurityExchange = TypeObjectUtils::build_complete_member_detail(name_SecurityExchange, member_ann_builtin_SecurityExchange, ann_custom_ExecutionReport);
            CompleteStructMember member_SecurityExchange = TypeObjectUtils::build_complete_struct_member(common_SecurityExchange, detail_SecurityExchange);
            TypeObjectUtils::add_complete_struct_member(member_seq_ExecutionReport, member_SecurityExchange);
        }
        {
            TypeIdentifierPair type_ids_Side;
            ReturnCode_t return_code_Side {eprosima::fastdds::dds::RETCODE_OK};
            return_code_Side =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_char", type_ids_Side);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_Side)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Side Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_Side = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_Side = 0x0000000d;
            bool common_Side_ec {false};
            CommonStructMember common_Side {TypeObjectUtils::build_common_struct_member(member_id_Side, member_flags_Side, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_Side, common_Side_ec))};
            if (!common_Side_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure Side member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_Side = "Side";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Side;
            ann_custom_ExecutionReport.reset();
            CompleteMemberDetail detail_Side = TypeObjectUtils::build_complete_member_detail(name_Side, member_ann_builtin_Side, ann_custom_ExecutionReport);
            CompleteStructMember member_Side = TypeObjectUtils::build_complete_struct_member(common_Side, detail_Side);
            TypeObjectUtils::add_complete_struct_member(member_seq_ExecutionReport, member_Side);
        }
        {
            TypeIdentifierPair type_ids_OrderQty;
            ReturnCode_t return_code_OrderQty {eprosima::fastdds::dds::RETCODE_OK};
            return_code_OrderQty =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_OrderQty);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_OrderQty)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "OrderQty Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_OrderQty = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_OrderQty = 0x0000000e;
            bool common_OrderQty_ec {false};
            CommonStructMember common_OrderQty {TypeObjectUtils::build_common_struct_member(member_id_OrderQty, member_flags_OrderQty, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_OrderQty, common_OrderQty_ec))};
            if (!common_OrderQty_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure OrderQty member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_OrderQty = "OrderQty";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_OrderQty;
            ann_custom_ExecutionReport.reset();
            CompleteMemberDetail detail_OrderQty = TypeObjectUtils::build_complete_member_detail(name_OrderQty, member_ann_builtin_OrderQty, ann_custom_ExecutionReport);
            CompleteStructMember member_OrderQty = TypeObjectUtils::build_complete_struct_member(common_OrderQty, detail_OrderQty);
            TypeObjectUtils::add_complete_struct_member(member_seq_ExecutionReport, member_OrderQty);
        }
        {
            TypeIdentifierPair type_ids_OrdType;
            ReturnCode_t return_code_OrdType {eprosima::fastdds::dds::RETCODE_OK};
            return_code_OrdType =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_char", type_ids_OrdType);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_OrdType)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "OrdType Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_OrdType = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_OrdType = 0x0000000f;
            bool common_OrdType_ec {false};
            CommonStructMember common_OrdType {TypeObjectUtils::build_common_struct_member(member_id_OrdType, member_flags_OrdType, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_OrdType, common_OrdType_ec))};
            if (!common_OrdType_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure OrdType member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_OrdType = "OrdType";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_OrdType;
            ann_custom_ExecutionReport.reset();
            CompleteMemberDetail detail_OrdType = TypeObjectUtils::build_complete_member_detail(name_OrdType, member_ann_builtin_OrdType, ann_custom_ExecutionReport);
            CompleteStructMember member_OrdType = TypeObjectUtils::build_complete_struct_member(common_OrdType, detail_OrdType);
            TypeObjectUtils::add_complete_struct_member(member_seq_ExecutionReport, member_OrdType);
        }
        {
            TypeIdentifierPair type_ids_Price;
            ReturnCode_t return_code_Price {eprosima::fastdds::dds::RETCODE_OK};
            return_code_Price =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_Price);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_Price)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Price Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_Price = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_Price = 0x00000010;
            bool common_Price_ec {false};
            CommonStructMember common_Price {TypeObjectUtils::build_common_struct_member(member_id_Price, member_flags_Price, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_Price, common_Price_ec))};
            if (!common_Price_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure Price member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_Price = "Price";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Price;
            ann_custom_ExecutionReport.reset();
            CompleteMemberDetail detail_Price = TypeObjectUtils::build_complete_member_detail(name_Price, member_ann_builtin_Price, ann_custom_ExecutionReport);
            CompleteStructMember member_Price = TypeObjectUtils::build_complete_struct_member(common_Price, detail_Price);
            TypeObjectUtils::add_complete_struct_member(member_seq_ExecutionReport, member_Price);
        }
        {
            TypeIdentifierPair type_ids_StopPx;
            ReturnCode_t return_code_StopPx {eprosima::fastdds::dds::RETCODE_OK};
            return_code_StopPx =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_StopPx);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_StopPx)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "StopPx Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_StopPx = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_StopPx = 0x00000011;
            bool common_StopPx_ec {false};
            CommonStructMember common_StopPx {TypeObjectUtils::build_common_struct_member(member_id_StopPx, member_flags_StopPx, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_StopPx, common_StopPx_ec))};
            if (!common_StopPx_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure StopPx member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_StopPx = "StopPx";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_StopPx;
            ann_custom_ExecutionReport.reset();
            CompleteMemberDetail detail_StopPx = TypeObjectUtils::build_complete_member_detail(name_StopPx, member_ann_builtin_StopPx, ann_custom_ExecutionReport);
            CompleteStructMember member_StopPx = TypeObjectUtils::build_complete_struct_member(common_StopPx, detail_StopPx);
            TypeObjectUtils::add_complete_struct_member(member_seq_ExecutionReport, member_StopPx);
        }
        {
            TypeIdentifierPair type_ids_TimeInForce;
            ReturnCode_t return_code_TimeInForce {eprosima::fastdds::dds::RETCODE_OK};
            return_code_TimeInForce =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_char", type_ids_TimeInForce);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_TimeInForce)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "TimeInForce Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_TimeInForce = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_TimeInForce = 0x00000012;
            bool common_TimeInForce_ec {false};
            CommonStructMember common_TimeInForce {TypeObjectUtils::build_common_struct_member(member_id_TimeInForce, member_flags_TimeInForce, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_TimeInForce, common_TimeInForce_ec))};
            if (!common_TimeInForce_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure TimeInForce member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_TimeInForce = "TimeInForce";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_TimeInForce;
            ann_custom_ExecutionReport.reset();
            CompleteMemberDetail detail_TimeInForce = TypeObjectUtils::build_complete_member_detail(name_TimeInForce, member_ann_builtin_TimeInForce, ann_custom_ExecutionReport);
            CompleteStructMember member_TimeInForce = TypeObjectUtils::build_complete_struct_member(common_TimeInForce, detail_TimeInForce);
            TypeObjectUtils::add_complete_struct_member(member_seq_ExecutionReport, member_TimeInForce);
        }
        {
            TypeIdentifierPair type_ids_ExecInst;
            ReturnCode_t return_code_ExecInst {eprosima::fastdds::dds::RETCODE_OK};
            return_code_ExecInst =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_ExecInst);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_ExecInst)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_ExecInst))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_ExecInst = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_ExecInst = 0x00000013;
            bool common_ExecInst_ec {false};
            CommonStructMember common_ExecInst {TypeObjectUtils::build_common_struct_member(member_id_ExecInst, member_flags_ExecInst, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_ExecInst, common_ExecInst_ec))};
            if (!common_ExecInst_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure ExecInst member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_ExecInst = "ExecInst";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ExecInst;
            ann_custom_ExecutionReport.reset();
            CompleteMemberDetail detail_ExecInst = TypeObjectUtils::build_complete_member_detail(name_ExecInst, member_ann_builtin_ExecInst, ann_custom_ExecutionReport);
            CompleteStructMember member_ExecInst = TypeObjectUtils::build_complete_struct_member(common_ExecInst, detail_ExecInst);
            TypeObjectUtils::add_complete_struct_member(member_seq_ExecutionReport, member_ExecInst);
        }
        {
            TypeIdentifierPair type_ids_LastQty;
            ReturnCode_t return_code_LastQty {eprosima::fastdds::dds::RETCODE_OK};
            return_code_LastQty =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_LastQty);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_LastQty)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "LastQty Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_LastQty = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_LastQty = 0x00000014;
            bool common_LastQty_ec {false};
            CommonStructMember common_LastQty {TypeObjectUtils::build_common_struct_member(member_id_LastQty, member_flags_LastQty, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_LastQty, common_LastQty_ec))};
            if (!common_LastQty_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure LastQty member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_LastQty = "LastQty";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_LastQty;
            ann_custom_ExecutionReport.reset();
            CompleteMemberDetail detail_LastQty = TypeObjectUtils::build_complete_member_detail(name_LastQty, member_ann_builtin_LastQty, ann_custom_ExecutionReport);
            CompleteStructMember member_LastQty = TypeObjectUtils::build_complete_struct_member(common_LastQty, detail_LastQty);
            TypeObjectUtils::add_complete_struct_member(member_seq_ExecutionReport, member_LastQty);
        }
        {
            TypeIdentifierPair type_ids_LastPx;
            ReturnCode_t return_code_LastPx {eprosima::fastdds::dds::RETCODE_OK};
            return_code_LastPx =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_LastPx);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_LastPx)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "LastPx Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_LastPx = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_LastPx = 0x00000015;
            bool common_LastPx_ec {false};
            CommonStructMember common_LastPx {TypeObjectUtils::build_common_struct_member(member_id_LastPx, member_flags_LastPx, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_LastPx, common_LastPx_ec))};
            if (!common_LastPx_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure LastPx member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_LastPx = "LastPx";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_LastPx;
            ann_custom_ExecutionReport.reset();
            CompleteMemberDetail detail_LastPx = TypeObjectUtils::build_complete_member_detail(name_LastPx, member_ann_builtin_LastPx, ann_custom_ExecutionReport);
            CompleteStructMember member_LastPx = TypeObjectUtils::build_complete_struct_member(common_LastPx, detail_LastPx);
            TypeObjectUtils::add_complete_struct_member(member_seq_ExecutionReport, member_LastPx);
        }
        {
            TypeIdentifierPair type_ids_LeavesQty;
            ReturnCode_t return_code_LeavesQty {eprosima::fastdds::dds::RETCODE_OK};
            return_code_LeavesQty =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_LeavesQty);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_LeavesQty)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "LeavesQty Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_LeavesQty = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_LeavesQty = 0x00000016;
            bool common_LeavesQty_ec {false};
            CommonStructMember common_LeavesQty {TypeObjectUtils::build_common_struct_member(member_id_LeavesQty, member_flags_LeavesQty, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_LeavesQty, common_LeavesQty_ec))};
            if (!common_LeavesQty_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure LeavesQty member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_LeavesQty = "LeavesQty";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_LeavesQty;
            ann_custom_ExecutionReport.reset();
            CompleteMemberDetail detail_LeavesQty = TypeObjectUtils::build_complete_member_detail(name_LeavesQty, member_ann_builtin_LeavesQty, ann_custom_ExecutionReport);
            CompleteStructMember member_LeavesQty = TypeObjectUtils::build_complete_struct_member(common_LeavesQty, detail_LeavesQty);
            TypeObjectUtils::add_complete_struct_member(member_seq_ExecutionReport, member_LeavesQty);
        }
        {
            TypeIdentifierPair type_ids_CumQty;
            ReturnCode_t return_code_CumQty {eprosima::fastdds::dds::RETCODE_OK};
            return_code_CumQty =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_CumQty);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_CumQty)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "CumQty Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_CumQty = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_CumQty = 0x00000017;
            bool common_CumQty_ec {false};
            CommonStructMember common_CumQty {TypeObjectUtils::build_common_struct_member(member_id_CumQty, member_flags_CumQty, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_CumQty, common_CumQty_ec))};
            if (!common_CumQty_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure CumQty member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_CumQty = "CumQty";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_CumQty;
            ann_custom_ExecutionReport.reset();
            CompleteMemberDetail detail_CumQty = TypeObjectUtils::build_complete_member_detail(name_CumQty, member_ann_builtin_CumQty, ann_custom_ExecutionReport);
            CompleteStructMember member_CumQty = TypeObjectUtils::build_complete_struct_member(common_CumQty, detail_CumQty);
            TypeObjectUtils::add_complete_struct_member(member_seq_ExecutionReport, member_CumQty);
        }
        {
            TypeIdentifierPair type_ids_AvgPx;
            ReturnCode_t return_code_AvgPx {eprosima::fastdds::dds::RETCODE_OK};
            return_code_AvgPx =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_AvgPx);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_AvgPx)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "AvgPx Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_AvgPx = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_AvgPx = 0x00000018;
            bool common_AvgPx_ec {false};
            CommonStructMember common_AvgPx {TypeObjectUtils::build_common_struct_member(member_id_AvgPx, member_flags_AvgPx, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_AvgPx, common_AvgPx_ec))};
            if (!common_AvgPx_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure AvgPx member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_AvgPx = "AvgPx";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_AvgPx;
            ann_custom_ExecutionReport.reset();
            CompleteMemberDetail detail_AvgPx = TypeObjectUtils::build_complete_member_detail(name_AvgPx, member_ann_builtin_AvgPx, ann_custom_ExecutionReport);
            CompleteStructMember member_AvgPx = TypeObjectUtils::build_complete_struct_member(common_AvgPx, detail_AvgPx);
            TypeObjectUtils::add_complete_struct_member(member_seq_ExecutionReport, member_AvgPx);
        }
        {
            TypeIdentifierPair type_ids_TransactTime;
            ReturnCode_t return_code_TransactTime {eprosima::fastdds::dds::RETCODE_OK};
            return_code_TransactTime =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids_TransactTime);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_TransactTime)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "TransactTime Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_TransactTime = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_TransactTime = 0x00000019;
            bool common_TransactTime_ec {false};
            CommonStructMember common_TransactTime {TypeObjectUtils::build_common_struct_member(member_id_TransactTime, member_flags_TransactTime, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_TransactTime, common_TransactTime_ec))};
            if (!common_TransactTime_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure TransactTime member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_TransactTime = "TransactTime";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_TransactTime;
            ann_custom_ExecutionReport.reset();
            CompleteMemberDetail detail_TransactTime = TypeObjectUtils::build_complete_member_detail(name_TransactTime, member_ann_builtin_TransactTime, ann_custom_ExecutionReport);
            CompleteStructMember member_TransactTime = TypeObjectUtils::build_complete_struct_member(common_TransactTime, detail_TransactTime);
            TypeObjectUtils::add_complete_struct_member(member_seq_ExecutionReport, member_TransactTime);
        }
        {
            TypeIdentifierPair type_ids_Text;
            ReturnCode_t return_code_Text {eprosima::fastdds::dds::RETCODE_OK};
            return_code_Text =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_Text);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_Text)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_Text))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_Text = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_Text = 0x0000001a;
            bool common_Text_ec {false};
            CommonStructMember common_Text {TypeObjectUtils::build_common_struct_member(member_id_Text, member_flags_Text, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_Text, common_Text_ec))};
            if (!common_Text_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure Text member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_Text = "Text";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_Text;
            ann_custom_ExecutionReport.reset();
            CompleteMemberDetail detail_Text = TypeObjectUtils::build_complete_member_detail(name_Text, member_ann_builtin_Text, ann_custom_ExecutionReport);
            CompleteStructMember member_Text = TypeObjectUtils::build_complete_struct_member(common_Text, detail_Text);
            TypeObjectUtils::add_complete_struct_member(member_seq_ExecutionReport, member_Text);
        }
        CompleteStructType struct_type_ExecutionReport = TypeObjectUtils::build_complete_struct_type(struct_flags_ExecutionReport, header_ExecutionReport, member_seq_ExecutionReport);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_ExecutionReport, type_name_ExecutionReport.to_string(), type_ids_ExecutionReport))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "DistributedATS_ExecutionReport::ExecutionReport already registered in TypeObjectRegistry for a different type.");
        }
    }
}

} // namespace DistributedATS_ExecutionReport


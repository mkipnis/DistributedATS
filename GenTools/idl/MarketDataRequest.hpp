// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MarketDataRequest.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen (version: 4.1.0).
 */

#ifndef FAST_DDS_GENERATED__DISTRIBUTEDATS_MARKETDATAREQUEST_MARKETDATAREQUEST_HPP
#define FAST_DDS_GENERATED__DISTRIBUTEDATS_MARKETDATAREQUEST_MARKETDATAREQUEST_HPP

#include <cstdint>
#include <string>
#include <utility>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include "Header.hpp"

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(MARKETDATAREQUEST_SOURCE)
#define MARKETDATAREQUEST_DllAPI __declspec( dllexport )
#else
#define MARKETDATAREQUEST_DllAPI __declspec( dllimport )
#endif // MARKETDATAREQUEST_SOURCE
#else
#define MARKETDATAREQUEST_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define MARKETDATAREQUEST_DllAPI
#endif // _WIN32

namespace DistributedATS_MarketDataRequest {

/*!
 * @brief This class represents the structure NoMDEntryTypes defined by the user in the IDL file.
 * @ingroup MarketDataRequest
 */
class NoMDEntryTypes
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport NoMDEntryTypes()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~NoMDEntryTypes()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object NoMDEntryTypes that will be copied.
     */
    eProsima_user_DllExport NoMDEntryTypes(
            const NoMDEntryTypes& x)
    {
                    m_MDEntryType = x.m_MDEntryType;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object NoMDEntryTypes that will be copied.
     */
    eProsima_user_DllExport NoMDEntryTypes(
            NoMDEntryTypes&& x) noexcept
    {
        m_MDEntryType = x.m_MDEntryType;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object NoMDEntryTypes that will be copied.
     */
    eProsima_user_DllExport NoMDEntryTypes& operator =(
            const NoMDEntryTypes& x)
    {

                    m_MDEntryType = x.m_MDEntryType;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object NoMDEntryTypes that will be copied.
     */
    eProsima_user_DllExport NoMDEntryTypes& operator =(
            NoMDEntryTypes&& x) noexcept
    {

        m_MDEntryType = x.m_MDEntryType;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x NoMDEntryTypes object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const NoMDEntryTypes& x) const
    {
        return (m_MDEntryType == x.m_MDEntryType);
    }

    /*!
     * @brief Comparison operator.
     * @param x NoMDEntryTypes object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const NoMDEntryTypes& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member MDEntryType
     * @param _MDEntryType New value for member MDEntryType
     */
    eProsima_user_DllExport void MDEntryType(
            char _MDEntryType)
    {
        m_MDEntryType = _MDEntryType;
    }

    /*!
     * @brief This function returns the value of member MDEntryType
     * @return Value of member MDEntryType
     */
    eProsima_user_DllExport char MDEntryType() const
    {
        return m_MDEntryType;
    }

    /*!
     * @brief This function returns a reference to member MDEntryType
     * @return Reference to member MDEntryType
     */
    eProsima_user_DllExport char& MDEntryType()
    {
        return m_MDEntryType;
    }



private:

    char m_MDEntryType{0};

};
typedef std::vector<NoMDEntryTypes> NoMDEntryTypesSeq;

/*!
 * @brief This class represents the structure NoRelatedSym defined by the user in the IDL file.
 * @ingroup MarketDataRequest
 */
class NoRelatedSym
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport NoRelatedSym()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~NoRelatedSym()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object NoRelatedSym that will be copied.
     */
    eProsima_user_DllExport NoRelatedSym(
            const NoRelatedSym& x)
    {
                    m_Symbol = x.m_Symbol;

                    m_SecurityExchange = x.m_SecurityExchange;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object NoRelatedSym that will be copied.
     */
    eProsima_user_DllExport NoRelatedSym(
            NoRelatedSym&& x) noexcept
    {
        m_Symbol = std::move(x.m_Symbol);
        m_SecurityExchange = std::move(x.m_SecurityExchange);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object NoRelatedSym that will be copied.
     */
    eProsima_user_DllExport NoRelatedSym& operator =(
            const NoRelatedSym& x)
    {

                    m_Symbol = x.m_Symbol;

                    m_SecurityExchange = x.m_SecurityExchange;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object NoRelatedSym that will be copied.
     */
    eProsima_user_DllExport NoRelatedSym& operator =(
            NoRelatedSym&& x) noexcept
    {

        m_Symbol = std::move(x.m_Symbol);
        m_SecurityExchange = std::move(x.m_SecurityExchange);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x NoRelatedSym object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const NoRelatedSym& x) const
    {
        return (m_Symbol == x.m_Symbol &&
           m_SecurityExchange == x.m_SecurityExchange);
    }

    /*!
     * @brief Comparison operator.
     * @param x NoRelatedSym object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const NoRelatedSym& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member Symbol
     * @param _Symbol New value to be copied in member Symbol
     */
    eProsima_user_DllExport void Symbol(
            const std::string& _Symbol)
    {
        m_Symbol = _Symbol;
    }

    /*!
     * @brief This function moves the value in member Symbol
     * @param _Symbol New value to be moved in member Symbol
     */
    eProsima_user_DllExport void Symbol(
            std::string&& _Symbol)
    {
        m_Symbol = std::move(_Symbol);
    }

    /*!
     * @brief This function returns a constant reference to member Symbol
     * @return Constant reference to member Symbol
     */
    eProsima_user_DllExport const std::string& Symbol() const
    {
        return m_Symbol;
    }

    /*!
     * @brief This function returns a reference to member Symbol
     * @return Reference to member Symbol
     */
    eProsima_user_DllExport std::string& Symbol()
    {
        return m_Symbol;
    }


    /*!
     * @brief This function copies the value in member SecurityExchange
     * @param _SecurityExchange New value to be copied in member SecurityExchange
     */
    eProsima_user_DllExport void SecurityExchange(
            const std::string& _SecurityExchange)
    {
        m_SecurityExchange = _SecurityExchange;
    }

    /*!
     * @brief This function moves the value in member SecurityExchange
     * @param _SecurityExchange New value to be moved in member SecurityExchange
     */
    eProsima_user_DllExport void SecurityExchange(
            std::string&& _SecurityExchange)
    {
        m_SecurityExchange = std::move(_SecurityExchange);
    }

    /*!
     * @brief This function returns a constant reference to member SecurityExchange
     * @return Constant reference to member SecurityExchange
     */
    eProsima_user_DllExport const std::string& SecurityExchange() const
    {
        return m_SecurityExchange;
    }

    /*!
     * @brief This function returns a reference to member SecurityExchange
     * @return Reference to member SecurityExchange
     */
    eProsima_user_DllExport std::string& SecurityExchange()
    {
        return m_SecurityExchange;
    }



private:

    std::string m_Symbol;
    std::string m_SecurityExchange;

};
typedef std::vector<NoRelatedSym> NoRelatedSymSeq;

/*!
 * @brief This class represents the structure MarketDataRequest defined by the user in the IDL file.
 * @ingroup MarketDataRequest
 */
class MarketDataRequest
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MarketDataRequest()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MarketDataRequest()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MarketDataRequest that will be copied.
     */
    eProsima_user_DllExport MarketDataRequest(
            const MarketDataRequest& x)
    {
                    m_fix_header = x.m_fix_header;

                    m_DATS_Source = x.m_DATS_Source;

                    m_DATS_Destination = x.m_DATS_Destination;

                    m_DATS_SourceUser = x.m_DATS_SourceUser;

                    m_DATS_DestinationUser = x.m_DATS_DestinationUser;

                    m_MDReqID = x.m_MDReqID;

                    m_SubscriptionRequestType = x.m_SubscriptionRequestType;

                    m_MarketDepth = x.m_MarketDepth;

                    m_c_NoMDEntryTypes = x.m_c_NoMDEntryTypes;

                    m_c_NoRelatedSym = x.m_c_NoRelatedSym;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MarketDataRequest that will be copied.
     */
    eProsima_user_DllExport MarketDataRequest(
            MarketDataRequest&& x) noexcept
    {
        m_fix_header = std::move(x.m_fix_header);
        m_DATS_Source = std::move(x.m_DATS_Source);
        m_DATS_Destination = std::move(x.m_DATS_Destination);
        m_DATS_SourceUser = std::move(x.m_DATS_SourceUser);
        m_DATS_DestinationUser = std::move(x.m_DATS_DestinationUser);
        m_MDReqID = std::move(x.m_MDReqID);
        m_SubscriptionRequestType = x.m_SubscriptionRequestType;
        m_MarketDepth = x.m_MarketDepth;
        m_c_NoMDEntryTypes = std::move(x.m_c_NoMDEntryTypes);
        m_c_NoRelatedSym = std::move(x.m_c_NoRelatedSym);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MarketDataRequest that will be copied.
     */
    eProsima_user_DllExport MarketDataRequest& operator =(
            const MarketDataRequest& x)
    {

                    m_fix_header = x.m_fix_header;

                    m_DATS_Source = x.m_DATS_Source;

                    m_DATS_Destination = x.m_DATS_Destination;

                    m_DATS_SourceUser = x.m_DATS_SourceUser;

                    m_DATS_DestinationUser = x.m_DATS_DestinationUser;

                    m_MDReqID = x.m_MDReqID;

                    m_SubscriptionRequestType = x.m_SubscriptionRequestType;

                    m_MarketDepth = x.m_MarketDepth;

                    m_c_NoMDEntryTypes = x.m_c_NoMDEntryTypes;

                    m_c_NoRelatedSym = x.m_c_NoRelatedSym;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MarketDataRequest that will be copied.
     */
    eProsima_user_DllExport MarketDataRequest& operator =(
            MarketDataRequest&& x) noexcept
    {

        m_fix_header = std::move(x.m_fix_header);
        m_DATS_Source = std::move(x.m_DATS_Source);
        m_DATS_Destination = std::move(x.m_DATS_Destination);
        m_DATS_SourceUser = std::move(x.m_DATS_SourceUser);
        m_DATS_DestinationUser = std::move(x.m_DATS_DestinationUser);
        m_MDReqID = std::move(x.m_MDReqID);
        m_SubscriptionRequestType = x.m_SubscriptionRequestType;
        m_MarketDepth = x.m_MarketDepth;
        m_c_NoMDEntryTypes = std::move(x.m_c_NoMDEntryTypes);
        m_c_NoRelatedSym = std::move(x.m_c_NoRelatedSym);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x MarketDataRequest object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MarketDataRequest& x) const
    {
        return (m_fix_header == x.m_fix_header &&
           m_DATS_Source == x.m_DATS_Source &&
           m_DATS_Destination == x.m_DATS_Destination &&
           m_DATS_SourceUser == x.m_DATS_SourceUser &&
           m_DATS_DestinationUser == x.m_DATS_DestinationUser &&
           m_MDReqID == x.m_MDReqID &&
           m_SubscriptionRequestType == x.m_SubscriptionRequestType &&
           m_MarketDepth == x.m_MarketDepth &&
           m_c_NoMDEntryTypes == x.m_c_NoMDEntryTypes &&
           m_c_NoRelatedSym == x.m_c_NoRelatedSym);
    }

    /*!
     * @brief Comparison operator.
     * @param x MarketDataRequest object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MarketDataRequest& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member fix_header
     * @param _fix_header New value to be copied in member fix_header
     */
    eProsima_user_DllExport void fix_header(
            const DistributedATS::Header& _fix_header)
    {
        m_fix_header = _fix_header;
    }

    /*!
     * @brief This function moves the value in member fix_header
     * @param _fix_header New value to be moved in member fix_header
     */
    eProsima_user_DllExport void fix_header(
            DistributedATS::Header&& _fix_header)
    {
        m_fix_header = std::move(_fix_header);
    }

    /*!
     * @brief This function returns a constant reference to member fix_header
     * @return Constant reference to member fix_header
     */
    eProsima_user_DllExport const DistributedATS::Header& fix_header() const
    {
        return m_fix_header;
    }

    /*!
     * @brief This function returns a reference to member fix_header
     * @return Reference to member fix_header
     */
    eProsima_user_DllExport DistributedATS::Header& fix_header()
    {
        return m_fix_header;
    }


    /*!
     * @brief This function copies the value in member DATS_Source
     * @param _DATS_Source New value to be copied in member DATS_Source
     */
    eProsima_user_DllExport void DATS_Source(
            const std::string& _DATS_Source)
    {
        m_DATS_Source = _DATS_Source;
    }

    /*!
     * @brief This function moves the value in member DATS_Source
     * @param _DATS_Source New value to be moved in member DATS_Source
     */
    eProsima_user_DllExport void DATS_Source(
            std::string&& _DATS_Source)
    {
        m_DATS_Source = std::move(_DATS_Source);
    }

    /*!
     * @brief This function returns a constant reference to member DATS_Source
     * @return Constant reference to member DATS_Source
     */
    eProsima_user_DllExport const std::string& DATS_Source() const
    {
        return m_DATS_Source;
    }

    /*!
     * @brief This function returns a reference to member DATS_Source
     * @return Reference to member DATS_Source
     */
    eProsima_user_DllExport std::string& DATS_Source()
    {
        return m_DATS_Source;
    }


    /*!
     * @brief This function copies the value in member DATS_Destination
     * @param _DATS_Destination New value to be copied in member DATS_Destination
     */
    eProsima_user_DllExport void DATS_Destination(
            const std::string& _DATS_Destination)
    {
        m_DATS_Destination = _DATS_Destination;
    }

    /*!
     * @brief This function moves the value in member DATS_Destination
     * @param _DATS_Destination New value to be moved in member DATS_Destination
     */
    eProsima_user_DllExport void DATS_Destination(
            std::string&& _DATS_Destination)
    {
        m_DATS_Destination = std::move(_DATS_Destination);
    }

    /*!
     * @brief This function returns a constant reference to member DATS_Destination
     * @return Constant reference to member DATS_Destination
     */
    eProsima_user_DllExport const std::string& DATS_Destination() const
    {
        return m_DATS_Destination;
    }

    /*!
     * @brief This function returns a reference to member DATS_Destination
     * @return Reference to member DATS_Destination
     */
    eProsima_user_DllExport std::string& DATS_Destination()
    {
        return m_DATS_Destination;
    }


    /*!
     * @brief This function copies the value in member DATS_SourceUser
     * @param _DATS_SourceUser New value to be copied in member DATS_SourceUser
     */
    eProsima_user_DllExport void DATS_SourceUser(
            const std::string& _DATS_SourceUser)
    {
        m_DATS_SourceUser = _DATS_SourceUser;
    }

    /*!
     * @brief This function moves the value in member DATS_SourceUser
     * @param _DATS_SourceUser New value to be moved in member DATS_SourceUser
     */
    eProsima_user_DllExport void DATS_SourceUser(
            std::string&& _DATS_SourceUser)
    {
        m_DATS_SourceUser = std::move(_DATS_SourceUser);
    }

    /*!
     * @brief This function returns a constant reference to member DATS_SourceUser
     * @return Constant reference to member DATS_SourceUser
     */
    eProsima_user_DllExport const std::string& DATS_SourceUser() const
    {
        return m_DATS_SourceUser;
    }

    /*!
     * @brief This function returns a reference to member DATS_SourceUser
     * @return Reference to member DATS_SourceUser
     */
    eProsima_user_DllExport std::string& DATS_SourceUser()
    {
        return m_DATS_SourceUser;
    }


    /*!
     * @brief This function copies the value in member DATS_DestinationUser
     * @param _DATS_DestinationUser New value to be copied in member DATS_DestinationUser
     */
    eProsima_user_DllExport void DATS_DestinationUser(
            const std::string& _DATS_DestinationUser)
    {
        m_DATS_DestinationUser = _DATS_DestinationUser;
    }

    /*!
     * @brief This function moves the value in member DATS_DestinationUser
     * @param _DATS_DestinationUser New value to be moved in member DATS_DestinationUser
     */
    eProsima_user_DllExport void DATS_DestinationUser(
            std::string&& _DATS_DestinationUser)
    {
        m_DATS_DestinationUser = std::move(_DATS_DestinationUser);
    }

    /*!
     * @brief This function returns a constant reference to member DATS_DestinationUser
     * @return Constant reference to member DATS_DestinationUser
     */
    eProsima_user_DllExport const std::string& DATS_DestinationUser() const
    {
        return m_DATS_DestinationUser;
    }

    /*!
     * @brief This function returns a reference to member DATS_DestinationUser
     * @return Reference to member DATS_DestinationUser
     */
    eProsima_user_DllExport std::string& DATS_DestinationUser()
    {
        return m_DATS_DestinationUser;
    }


    /*!
     * @brief This function copies the value in member MDReqID
     * @param _MDReqID New value to be copied in member MDReqID
     */
    eProsima_user_DllExport void MDReqID(
            const std::string& _MDReqID)
    {
        m_MDReqID = _MDReqID;
    }

    /*!
     * @brief This function moves the value in member MDReqID
     * @param _MDReqID New value to be moved in member MDReqID
     */
    eProsima_user_DllExport void MDReqID(
            std::string&& _MDReqID)
    {
        m_MDReqID = std::move(_MDReqID);
    }

    /*!
     * @brief This function returns a constant reference to member MDReqID
     * @return Constant reference to member MDReqID
     */
    eProsima_user_DllExport const std::string& MDReqID() const
    {
        return m_MDReqID;
    }

    /*!
     * @brief This function returns a reference to member MDReqID
     * @return Reference to member MDReqID
     */
    eProsima_user_DllExport std::string& MDReqID()
    {
        return m_MDReqID;
    }


    /*!
     * @brief This function sets a value in member SubscriptionRequestType
     * @param _SubscriptionRequestType New value for member SubscriptionRequestType
     */
    eProsima_user_DllExport void SubscriptionRequestType(
            char _SubscriptionRequestType)
    {
        m_SubscriptionRequestType = _SubscriptionRequestType;
    }

    /*!
     * @brief This function returns the value of member SubscriptionRequestType
     * @return Value of member SubscriptionRequestType
     */
    eProsima_user_DllExport char SubscriptionRequestType() const
    {
        return m_SubscriptionRequestType;
    }

    /*!
     * @brief This function returns a reference to member SubscriptionRequestType
     * @return Reference to member SubscriptionRequestType
     */
    eProsima_user_DllExport char& SubscriptionRequestType()
    {
        return m_SubscriptionRequestType;
    }


    /*!
     * @brief This function sets a value in member MarketDepth
     * @param _MarketDepth New value for member MarketDepth
     */
    eProsima_user_DllExport void MarketDepth(
            int32_t _MarketDepth)
    {
        m_MarketDepth = _MarketDepth;
    }

    /*!
     * @brief This function returns the value of member MarketDepth
     * @return Value of member MarketDepth
     */
    eProsima_user_DllExport int32_t MarketDepth() const
    {
        return m_MarketDepth;
    }

    /*!
     * @brief This function returns a reference to member MarketDepth
     * @return Reference to member MarketDepth
     */
    eProsima_user_DllExport int32_t& MarketDepth()
    {
        return m_MarketDepth;
    }


    /*!
     * @brief This function copies the value in member c_NoMDEntryTypes
     * @param _c_NoMDEntryTypes New value to be copied in member c_NoMDEntryTypes
     */
    eProsima_user_DllExport void c_NoMDEntryTypes(
            const NoMDEntryTypesSeq& _c_NoMDEntryTypes)
    {
        m_c_NoMDEntryTypes = _c_NoMDEntryTypes;
    }

    /*!
     * @brief This function moves the value in member c_NoMDEntryTypes
     * @param _c_NoMDEntryTypes New value to be moved in member c_NoMDEntryTypes
     */
    eProsima_user_DllExport void c_NoMDEntryTypes(
            NoMDEntryTypesSeq&& _c_NoMDEntryTypes)
    {
        m_c_NoMDEntryTypes = std::move(_c_NoMDEntryTypes);
    }

    /*!
     * @brief This function returns a constant reference to member c_NoMDEntryTypes
     * @return Constant reference to member c_NoMDEntryTypes
     */
    eProsima_user_DllExport const NoMDEntryTypesSeq& c_NoMDEntryTypes() const
    {
        return m_c_NoMDEntryTypes;
    }

    /*!
     * @brief This function returns a reference to member c_NoMDEntryTypes
     * @return Reference to member c_NoMDEntryTypes
     */
    eProsima_user_DllExport NoMDEntryTypesSeq& c_NoMDEntryTypes()
    {
        return m_c_NoMDEntryTypes;
    }


    /*!
     * @brief This function copies the value in member c_NoRelatedSym
     * @param _c_NoRelatedSym New value to be copied in member c_NoRelatedSym
     */
    eProsima_user_DllExport void c_NoRelatedSym(
            const NoRelatedSymSeq& _c_NoRelatedSym)
    {
        m_c_NoRelatedSym = _c_NoRelatedSym;
    }

    /*!
     * @brief This function moves the value in member c_NoRelatedSym
     * @param _c_NoRelatedSym New value to be moved in member c_NoRelatedSym
     */
    eProsima_user_DllExport void c_NoRelatedSym(
            NoRelatedSymSeq&& _c_NoRelatedSym)
    {
        m_c_NoRelatedSym = std::move(_c_NoRelatedSym);
    }

    /*!
     * @brief This function returns a constant reference to member c_NoRelatedSym
     * @return Constant reference to member c_NoRelatedSym
     */
    eProsima_user_DllExport const NoRelatedSymSeq& c_NoRelatedSym() const
    {
        return m_c_NoRelatedSym;
    }

    /*!
     * @brief This function returns a reference to member c_NoRelatedSym
     * @return Reference to member c_NoRelatedSym
     */
    eProsima_user_DllExport NoRelatedSymSeq& c_NoRelatedSym()
    {
        return m_c_NoRelatedSym;
    }



private:

    DistributedATS::Header m_fix_header;
    std::string m_DATS_Source;
    std::string m_DATS_Destination;
    std::string m_DATS_SourceUser;
    std::string m_DATS_DestinationUser;
    std::string m_MDReqID;
    char m_SubscriptionRequestType{0};
    int32_t m_MarketDepth{0};
    NoMDEntryTypesSeq m_c_NoMDEntryTypes;
    NoRelatedSymSeq m_c_NoRelatedSym;

};

} // namespace DistributedATS_MarketDataRequest

#endif // _FAST_DDS_GENERATED_DISTRIBUTEDATS_MARKETDATAREQUEST_MARKETDATAREQUEST_HPP_


